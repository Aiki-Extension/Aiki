[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "Distraction Shield/background.js",
    "content": "/**\n * The functions that form the functionality of the extension that takes place in the background.\n * @mixin background\n */\n\nimport BlockedSiteList from './classes/BlockedSiteList';\nimport * as interception from './modules/statistics/interception';\nimport * as storage from './modules/storage/storage';\nimport UserSettings from  './classes/UserSettings'\nimport * as constants from'./constants';\nimport {isInRegexList} from './modules/stringutil';\nimport {scrubFromHistory} from './modules/browserutil'\nimport StorageListener from './modules/storage/StorageListener'\n\n/**\n * Unfortunately webrequestlisteners are not able to process asynchronous functions.\n * Therefore we need a global variable to keep track of the state of the extension.\n * @type {boolean}\n * @memberOf background\n */\n\nlet isInterceptionOn = true;\n\n/**\n * inits the background by setting the listener to the {@link BlockedSiteList}\n * @memberOf background\n */\nexport function initBackground(){\n    storage.getBlacklist(function (blockedSiteList) {\n        replaceListener(blockedSiteList);\n    });\n}\n\n/* ---------- ---------- Webrequest functions ----------  ---------- */\n\n/**\n * This function updates the webrequestlistener by passing a {@link BlockedSiteList} to it. From this list, the active urls\n * are taken. If the {@link UserSettings}  is on and there are active urls, a new webrequestlistener is added which intercepts\n * the active urls.\n * @param blockedSiteList {BlockedSiteList} the new list of BlockedSites\n * @memberOf background\n */\nfunction replaceListener(blockedSiteList) {\n    removeWebRequestListener();\n    storage.getSettings(settings_object => {\n        let urlList = blockedSiteList.activeUrls;\n        if (settings_object.isInterceptionOn() && urlList.length > 0)\n            addWebRequestListener(urlList);\n    })\n}\n\n/**\n * Adds a listener to the onBeforeRequest which blocks all requests to the urls in the urlList\n * @param urlList {Array} the active urls to be intercepted\n * @memberOf background\n */\nfunction addWebRequestListener(urlList) {\n    chrome.webRequest.onBeforeRequest.addListener(\n        handleInterception\n        , {\n            urls: urlList\n            , types: [\"main_frame\"]\n        }\n        , [\"blocking\"]\n    );\n}\n\n/**\n * Clears the onBeforeRequest listener. Used to turn the extension off & to update the listener with a new listener.\n * @memberOf background\n */\nfunction removeWebRequestListener() {\n    chrome.webRequest.onBeforeRequest.removeListener(handleInterception);\n}\n\n\n/* ---------- ---------- Interception functions ----------  ---------- */\n\n/**\n * function that does everything that should happen when we decide to intercept the current request.\n * Incrementing counters and modifying url's\n * @param details details about the current webrequest\n * @memberOf background\n */\nfunction intercept(details) {\n    interception.incrementInterceptionCounter(details.url);\n    interception.addToInterceptDateList();\n    let redirectLink = constants.zeeguuExLink;\n    let params = constants.tdsRedirectParam + details.url;\n    return {redirectUrl: redirectLink + params};\n}\n\n/**\n * Function which fires when we enter a website on the blockedsite list.\n * If we come from zeeguu and have completed an exercise than we may continue, else we redirect.\n * @param details the details found by the onWebRequestListener about the current webRequest\n * @memberOf background\n */\nfunction handleInterception(details) {\n    if (isInterceptionOn && !isInRegexList(constants.whitelist, details.url)) {\n        if (constants.exerciseCompleteRegex.test(details.url)) {\n            scrubFromHistory(constants.exerciseCompleteParam);\n            let url = details.url.replace(constants.exerciseCompleteRegex, \"\");\n            turnOffInterception();\n            return {redirectUrl: url};\n        } else {\n            return intercept(details);\n        }\n    }\n}\n\n/**\n * turns off interception from the background by setting {@link isInterceptionOn} to false and by retrieving\n * the {@link UserSettings}  from {@link storage} and triggering the turnOffFor function\n * @memberOf background\n */\nfunction turnOffInterception() {\n    isInterceptionOn = false;\n    storage.getSettings(settings_object => {\n        settings_object.turnOffFor(settings_object.interceptionInterval, true);\n        storage.setSettings(settings_object);\n    })\n}\n\n/* ---------- ---------- Storage Listener ----------  ---------- */\n\n/**\n * Actual function that is fired upon the change in storage. If the blockedSiteList changes,\n * we update our listener. If the settings change we encorperate this in the background's behaviour.\n * @param changes data passed by the storage.onChanged event\n * @method handleStorageChange\n * @memberOf background\n */\nnew StorageListener((changes) => {\n    if (constants.tds_blacklist in changes) {\n        let newBlockedSiteList = BlockedSiteList.deserializeBlockedSiteList(changes[constants.tds_blacklist].newValue);\n        replaceListener(newBlockedSiteList);\n    }\n    if (constants.tds_settings in changes) {\n        let newSettings = UserSettings.deserializeSettings(changes[constants.tds_settings].newValue);\n        let oldSettings = UserSettings.deserializeSettings(changes[constants.tds_settings].oldValue);\n        isInterceptionOn = newSettings.isInterceptionOn();\n        if (!newSettings.isInterceptionOn())\n            newSettings.reInitTimer();\n        else if (!oldSettings || !oldSettings.isInterceptionOn())\n            storage.getBlacklist(blockedSiteList => replaceListener(blockedSiteList));\n    }\n});\n\n",
    "static": true,
    "longname": "Distraction Shield/background.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "isInterceptionOn",
    "memberof": "Distraction Shield/background.js",
    "static": true,
    "longname": "Distraction Shield/background.js~isInterceptionOn",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/background.js",
    "importStyle": null,
    "description": "Unfortunately webrequestlisteners are not able to process asynchronous functions.\nTherefore we need a global variable to keep track of the state of the extension.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "background"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2,
    "kind": "function",
    "name": "initBackground",
    "memberof": "Distraction Shield/background.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/background.js~initBackground",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/background.js",
    "importStyle": "{initBackground}",
    "description": "inits the background by setting the listener to the {@link BlockedSiteList}",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "background"
      }
    ],
    "params": []
  },
  {
    "__docId__": 3,
    "kind": "function",
    "name": "replaceListener",
    "memberof": "Distraction Shield/background.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/background.js~replaceListener",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/background.js",
    "importStyle": null,
    "description": "This function updates the webrequestlistener by passing a {@link BlockedSiteList} to it. From this list, the active urls\nare taken. If the {@link UserSettings}  is on and there are active urls, a new webrequestlistener is added which intercepts\nthe active urls.",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "background"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedSiteList",
        "description": "{BlockedSiteList} the new list of BlockedSites"
      }
    ]
  },
  {
    "__docId__": 4,
    "kind": "function",
    "name": "addWebRequestListener",
    "memberof": "Distraction Shield/background.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/background.js~addWebRequestListener",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/background.js",
    "importStyle": null,
    "description": "Adds a listener to the onBeforeRequest which blocks all requests to the urls in the urlList",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "background"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "urlList",
        "description": "{Array} the active urls to be intercepted"
      }
    ]
  },
  {
    "__docId__": 5,
    "kind": "function",
    "name": "removeWebRequestListener",
    "memberof": "Distraction Shield/background.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/background.js~removeWebRequestListener",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/background.js",
    "importStyle": null,
    "description": "Clears the onBeforeRequest listener. Used to turn the extension off & to update the listener with a new listener.",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "background"
      }
    ],
    "params": []
  },
  {
    "__docId__": 6,
    "kind": "function",
    "name": "intercept",
    "memberof": "Distraction Shield/background.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/background.js~intercept",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/background.js",
    "importStyle": null,
    "description": "function that does everything that should happen when we decide to intercept the current request.\nIncrementing counters and modifying url's",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "background"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "details",
        "description": "details about the current webrequest"
      }
    ],
    "return": {
      "types": [
        "{\"redirectUrl\": *}"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "function",
    "name": "handleInterception",
    "memberof": "Distraction Shield/background.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/background.js~handleInterception",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/background.js",
    "importStyle": null,
    "description": "Function which fires when we enter a website on the blockedsite list.\nIf we come from zeeguu and have completed an exercise than we may continue, else we redirect.",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "background"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "details",
        "description": "the details found by the onWebRequestListener about the current webRequest"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "function",
    "name": "turnOffInterception",
    "memberof": "Distraction Shield/background.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/background.js~turnOffInterception",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/background.js",
    "importStyle": null,
    "description": "turns off interception from the background by setting {@link isInterceptionOn} to false and by retrieving\nthe {@link UserSettings}  from {@link storage} and triggering the turnOffFor function",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "background"
      }
    ],
    "params": []
  },
  {
    "__docId__": 9,
    "kind": "file",
    "name": "Distraction Shield/classes/BlockedSite.js",
    "content": "import * as constants from '../constants';\n\nexport default class BlockedSite {\n    /**\n     * Basic datatype of the extension. One BlockedSite instance represents one website that the user wants to block.\n     * @param {string} urlBase Domain of the BlockedSite\n     * @param {string} title Title of the BlockedSite\n     * @constructs BlockedSite\n     * @class\n     */\n    constructor(urlBase, title) {\n        /** @member {string} BlockedSite#url String with url formatted in the way the google API uses them for webRequest listeners. \\n\n         *  I.E. \" http://www.facebook.com \" -> \" *://www.facebook.com/* \"\n         */\n        this._url = this.constructUrl(urlBase);\n        /** @member {string} BlockedSite#domain Nice (displayable to the user) version of the url field*/\n        this._domain = urlBase;\n        /** @member {string} BlockedSite#title Title of the tab we find if we were to go to the endpoint of this url*/\n        this._name = title;\n        /** @member  {string} BlockedSite#icon Html-code which gets the favicon of the page*/\n        this._icon = this.constructIcon(urlBase);\n        /** @member {boolean} BlockedSite#checkboxVal Is interception enabled for this blockedSite?*/\n        this._checkboxVal = true;\n        /** @member {int} BlockedSite#counter How many times were we intercepted from this page */\n        this._counter = 0;\n        /** @member {int} BlockedSite#timeSpent How much time did we waste on this website */\n        this._timeSpent = 0;\n    }\n\n    /**\n     * returns url regex\n     * @param url\n     * @returns {string} formatted url\n     * @function BlockedSite#constructUrl\n     */\n    constructUrl(url) {\n        return \"*://\" + url + \"/*\";\n    }\n\n    /**\n     * @param url\n     * @returns {string} html string for url's favicon\n     * @function BlockedSite#constructIcon\n     */\n    constructIcon(url) {\n        return \"<img style=\\\"-webkit-user-select: none\\\" src=\\\"\" + constants.FAVICONLINK + url + \"\\\">\"\n    }\n\n    set url(url) { this._url = url; }\n    get url() { return this._url; }\n\n    set domain(domain) { this._domain = domain; }\n    get domain() { return this._domain; }\n\n    set icon(icon) { this._icon = icon; }\n    get icon() { return this._icon; }\n\n    set name(name) { this._name = name; }\n    get name() { return this._name; }\n\n    set counter(counter) { this._counter = counter; }\n    get counter() { return this._counter; }\n\n    set timeSpent(timeSpent) { this._timeSpent = timeSpent; }\n    get timeSpent() { return this._timeSpent; }\n\n    set checkboxVal(checkboxVal) { this._checkboxVal = checkboxVal; }\n    get checkboxVal() { return this._checkboxVal; }\n\n\n    /* --------------- --------------- Serialization --------------- --------------- */\n\n    /**\n     * @param {BlockedSite} blockedSite BlockedSite to serialize\n     * @returns {string} stringified blockedsite\n     * @function BlockedSite#serializeBlockedSite\n     */\n    static serializeBlockedSite(blockedSite) {\n        return JSON.stringify(blockedSite);\n    }\n\n    /**\n     * Parses the JSON object to a BlockedSite object\n     * @param {JSON} blockedSite BlockedSite to parse\n     * @returns {BlockedSite} parsed Blocked Site\n     * @function BlockedSite#parseBlockedSite\n     */\n\n    static parseBlockedSite(blockedSite) {\n        let b = new BlockedSite();\n        b.url = blockedSite._url;\n        b.domain = blockedSite._domain;\n        b.name = blockedSite._name;\n        b.icon = blockedSite._icon;\n        b.checkboxVal = blockedSite._checkboxVal;\n        b.counter = blockedSite._counter;\n        b.timeSpent = blockedSite._timeSpent;\n        return b;\n    }\n\n    /**\n     * This parses a JSON string to a BlockedSite Object\n     * @param serializedBlockedSite {string} JSON string containing the BlockedSite\n     * @returns {BlockedSite | null} Deserialized BlockedSite\n     * @function BlockedSite#deserializeBlockedSite\n     */\n\n    static deserializeBlockedSite(serializedBlockedSite) {\n        if(serializedBlockedSite != null) {\n            let parsed = JSON.parse(serializedBlockedSite);\n            return BlockedSite.parseBlockedSite(parsed);\n        }\n        return null;\n    }\n\n}",
    "static": true,
    "longname": "Distraction Shield/classes/BlockedSite.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 10,
    "kind": "class",
    "name": "BlockedSite",
    "memberof": "Distraction Shield/classes/BlockedSite.js",
    "static": true,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/classes/BlockedSite.js",
    "importStyle": "BlockedSite",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 11,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#constructor",
    "access": null,
    "description": "Basic datatype of the extension. One BlockedSite instance represents one website that the user wants to block.",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@constructs",
        "tagValue": "BlockedSite"
      },
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "urlBase",
        "description": "Domain of the BlockedSite"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "Title of the BlockedSite"
      }
    ]
  },
  {
    "__docId__": 12,
    "kind": "member",
    "name": "_url",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_url",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "member",
    "name": "_domain",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_domain",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "name": "_name",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_name",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "member",
    "name": "_icon",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_icon",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "name": "_checkboxVal",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_checkboxVal",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "member",
    "name": "_counter",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_counter",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "member",
    "name": "_timeSpent",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_timeSpent",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "method",
    "name": "constructUrl",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#constructUrl",
    "access": null,
    "description": "returns url regex",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} formatted url"
      },
      {
        "tagName": "@function",
        "tagValue": "BlockedSite#constructUrl"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "formatted url"
    }
  },
  {
    "__docId__": 20,
    "kind": "method",
    "name": "constructIcon",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#constructIcon",
    "access": null,
    "description": "",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html string for url's favicon"
      },
      {
        "tagName": "@function",
        "tagValue": "BlockedSite#constructIcon"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html string for url's favicon"
    }
  },
  {
    "__docId__": 21,
    "kind": "set",
    "name": "url",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#url",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "member",
    "name": "_url",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_url",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "get",
    "name": "url",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#url",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "set",
    "name": "domain",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#domain",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "_domain",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_domain",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "get",
    "name": "domain",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#domain",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "set",
    "name": "icon",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#icon",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "member",
    "name": "_icon",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_icon",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "get",
    "name": "icon",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#icon",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "set",
    "name": "name",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#name",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 31,
    "kind": "member",
    "name": "_name",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_name",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "get",
    "name": "name",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#name",
    "access": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "set",
    "name": "counter",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#counter",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "member",
    "name": "_counter",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_counter",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "get",
    "name": "counter",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#counter",
    "access": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 36,
    "kind": "set",
    "name": "timeSpent",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#timeSpent",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 37,
    "kind": "member",
    "name": "_timeSpent",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_timeSpent",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 38,
    "kind": "get",
    "name": "timeSpent",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#timeSpent",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "set",
    "name": "checkboxVal",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#checkboxVal",
    "access": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "member",
    "name": "_checkboxVal",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#_checkboxVal",
    "access": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "get",
    "name": "checkboxVal",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite#checkboxVal",
    "access": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "serializeBlockedSite",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite.serializeBlockedSite",
    "access": null,
    "description": "",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} stringified blockedsite"
      },
      {
        "tagName": "@function",
        "tagValue": "BlockedSite#serializeBlockedSite"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BlockedSite"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedSite",
        "description": "BlockedSite to serialize"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "stringified blockedsite"
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "parseBlockedSite",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite.parseBlockedSite",
    "access": null,
    "description": "Parses the JSON object to a BlockedSite object",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BlockedSite} parsed Blocked Site"
      },
      {
        "tagName": "@function",
        "tagValue": "BlockedSite#parseBlockedSite"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "JSON"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedSite",
        "description": "BlockedSite to parse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BlockedSite"
      ],
      "spread": false,
      "description": "parsed Blocked Site"
    }
  },
  {
    "__docId__": 44,
    "kind": "method",
    "name": "deserializeBlockedSite",
    "memberof": "Distraction Shield/classes/BlockedSite.js~BlockedSite",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/classes/BlockedSite.js~BlockedSite.deserializeBlockedSite",
    "access": null,
    "description": "This parses a JSON string to a BlockedSite Object",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BlockedSite | null} Deserialized BlockedSite"
      },
      {
        "tagName": "@function",
        "tagValue": "BlockedSite#deserializeBlockedSite"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "serializedBlockedSite",
        "description": "{string} JSON string containing the BlockedSite"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BlockedSite ",
        " null"
      ],
      "spread": false,
      "description": "Deserialized BlockedSite"
    }
  },
  {
    "__docId__": 45,
    "kind": "file",
    "name": "Distraction Shield/classes/BlockedSiteList.js",
    "content": "import BlockedSite from '../classes/BlockedSite'\n\nexport default class BlockedSiteList extends Array {\n\n    /**\n     * @constructs BlockedSiteList\n     * @class\n     */\n    constructor() {\n        super();\n        this.__proto__ = BlockedSiteList.prototype;\n    }\n\n    get urls() {\n        if (this != []) {\n            return this.map(function (bs) {\n                return bs.url;\n            });\n        }\n        return [];\n    }\n\n    get activeUrls() {\n        if (this != []) {\n            let urlList = this.filterOnChecked();\n            if (urlList != []) {\n                return urlList.map(function (bs) {\n                    return bs.url;\n                });\n            }\n        }\n        return [];\n    }\n\n    /**\n     * Adds the BlockedSite if this doesn't exist in the list yet.\n     * @param newBlockedSite {BlockedSite} {@link BlockedSite} to be added\n     * @returns {boolean} Returns true if added to the list\n     * @function BlockedSiteList#addToList\n     */\n    addToList(newBlockedSite) {\n        let currentUrls = this.urls;\n        let unique = currentUrls.every(function (urlFromList) {\n            return urlFromList != newBlockedSite.url;\n        });\n        if (unique) {\n            this.push(newBlockedSite);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Adds all BlockedSites to the list\n     * @param blockedSiteList {BlockedSiteList} {@link BlockedSite} to be added\n     * @function BlockedSiteList#addAllToList\n     */\n    addAllToList(blockedSiteList) {\n        for (let i = 0; i < blockedSiteList.length; i++) {\n            this.addToList(blockedSiteList[i]);\n        }\n    }\n\n    /**\n     * removes BlockedSite from the list\n     * @param blockedSiteToDelete {BlockedSite}\n     * @function BlockedSiteList#removeFromList\n     */\n    removeFromList(blockedSiteToDelete) {\n        let index = this.map(function(e) { return e.domain; }).indexOf(blockedSiteToDelete.domain);\n        this.splice(index, 1);\n    }\n\n    /**\n     * Takes a BlockedSite and updates the corresponding match in the BlockedSiteList\n     * @param blockedSite {BlockedSite} BlockedSite to update\n     * @function BlockedSiteList#updateInList\n     */\n    updateInList(blockedSite){\n        this.forEach((item, id) => {\n            if (item.url === blockedSite.url)\n                this[id] = blockedSite;\n        });\n    }\n\n    /**\n     * Filters BlockedSiteList based on checkboxVal of {@link BlockedSite}\n     * @returns {BlockedSiteList} filtered BlockedSiteList\n     * @function BlockedSiteList#filterOnChecked\n     */\n    filterOnChecked() {\n        if (this != []) {\n            return this.filter(function (a) {\n                return a.checkboxVal == true;\n            });\n        }\n        return [];\n    }\n\n    /* --------------- --------------- Serialization --------------- --------------- */\n\n    /**\n     * @param {BlockedSiteList} blockedSiteList BlockedSiteList to serialize\n     * @returns {string} stringified BlockedSiteList\n     * @function BlockedSiteList#serializeBlockedSiteList\n     */\n    static serializeBlockedSiteList(blockedSiteList) {\n        let toSerialize = blockedSiteList.map(BlockedSite.serializeBlockedSite);\n        return JSON.stringify(toSerialize);\n    }\n\n    /**\n     * Parses the JSON blockedSiteList to a BlockedSiteList object\n     * @param {JSON} blockedSiteList BlockedSiteList to parse\n     * @returns {BlockedSiteList} parsed BlockedSiteList\n     * @function BlockedSiteList#parseBlockedSite\n     */\n    static parseBlockedSiteList(blockedSiteList) {\n        let bl = new BlockedSiteList();\n        bl.addAllToList(blockedSiteList);\n        return bl;\n    }\n\n    /**\n     * This parses a JSON string to a BlockedSiteList Object\n     * @param serializedBlockedSiteList {string} JSON string containing the BlockedSiteList\n     * @returns {BlockedSiteList | null} Deserialized BlockedSiteList\n     * @function BlockedSiteList#deserializeBlockedSiteList\n     */\n    static deserializeBlockedSiteList(serializedBlockedSiteList) {\n        if (serializedBlockedSiteList != null) {\n            let parsed = JSON.parse(serializedBlockedSiteList);\n            parsed = parsed.map(BlockedSite.deserializeBlockedSite);\n            return BlockedSiteList.parseBlockedSiteList(parsed);\n        }\n        return null;\n    }\n\n}",
    "static": true,
    "longname": "Distraction Shield/classes/BlockedSiteList.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 46,
    "kind": "class",
    "name": "BlockedSiteList",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js",
    "static": true,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/classes/BlockedSiteList.js",
    "importStyle": "BlockedSiteList",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "Array"
    ]
  },
  {
    "__docId__": 47,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList#constructor",
    "access": null,
    "description": "",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@constructs",
        "tagValue": "BlockedSiteList"
      },
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 48,
    "kind": "member",
    "name": "__proto__",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList#__proto__",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "get",
    "name": "urls",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList#urls",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "get",
    "name": "activeUrls",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList#activeUrls",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "addToList",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList#addToList",
    "access": null,
    "description": "Adds the BlockedSite if this doesn't exist in the list yet.",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns true if added to the list"
      },
      {
        "tagName": "@function",
        "tagValue": "BlockedSiteList#addToList"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newBlockedSite",
        "description": "{BlockedSite} {@link BlockedSite} to be added"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if added to the list"
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "addAllToList",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList#addAllToList",
    "access": null,
    "description": "Adds all BlockedSites to the list",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "BlockedSiteList#addAllToList"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedSiteList",
        "description": "{BlockedSiteList} {@link BlockedSite} to be added"
      }
    ]
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "removeFromList",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList#removeFromList",
    "access": null,
    "description": "removes BlockedSite from the list",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "BlockedSiteList#removeFromList"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedSiteToDelete",
        "description": "{BlockedSite}"
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "updateInList",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList#updateInList",
    "access": null,
    "description": "Takes a BlockedSite and updates the corresponding match in the BlockedSiteList",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "BlockedSiteList#updateInList"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedSite",
        "description": "{BlockedSite} BlockedSite to update"
      }
    ]
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "[id]",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList#[id]",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "filterOnChecked",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList#filterOnChecked",
    "access": null,
    "description": "Filters BlockedSiteList based on checkboxVal of {@link BlockedSite}",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BlockedSiteList} filtered BlockedSiteList"
      },
      {
        "tagName": "@function",
        "tagValue": "BlockedSiteList#filterOnChecked"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "BlockedSiteList"
      ],
      "spread": false,
      "description": "filtered BlockedSiteList"
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "serializeBlockedSiteList",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList.serializeBlockedSiteList",
    "access": null,
    "description": "",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} stringified BlockedSiteList"
      },
      {
        "tagName": "@function",
        "tagValue": "BlockedSiteList#serializeBlockedSiteList"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BlockedSiteList"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedSiteList",
        "description": "BlockedSiteList to serialize"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "stringified BlockedSiteList"
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "parseBlockedSiteList",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList.parseBlockedSiteList",
    "access": null,
    "description": "Parses the JSON blockedSiteList to a BlockedSiteList object",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BlockedSiteList} parsed BlockedSiteList"
      },
      {
        "tagName": "@function",
        "tagValue": "BlockedSiteList#parseBlockedSite"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "JSON"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedSiteList",
        "description": "BlockedSiteList to parse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BlockedSiteList"
      ],
      "spread": false,
      "description": "parsed BlockedSiteList"
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "deserializeBlockedSiteList",
    "memberof": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/classes/BlockedSiteList.js~BlockedSiteList.deserializeBlockedSiteList",
    "access": null,
    "description": "This parses a JSON string to a BlockedSiteList Object",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BlockedSiteList | null} Deserialized BlockedSiteList"
      },
      {
        "tagName": "@function",
        "tagValue": "BlockedSiteList#deserializeBlockedSiteList"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "serializedBlockedSiteList",
        "description": "{string} JSON string containing the BlockedSiteList"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BlockedSiteList ",
        " null"
      ],
      "spread": false,
      "description": "Deserialized BlockedSiteList"
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "Distraction Shield/classes/UserSettings.js",
    "content": "import * as constants from '../constants'\nimport * as storage from '../modules/storage/storage'\n\nexport default class UserSettings {\n\n    /**\n     * This object holds all the data that is connected to the user's preferences.\n     * Furthermore has the functionality to turn the interception part of the of extension on or off.\n     * Since the current state is saved here too.\n     * @param {string} id parameter for user's uuid (default = undefined)\n     * @constructs UserSettings\n     * @class\n     */\n    constructor(id = undefined) {\n\n        /**\n         * @typedef {Object} settingsStatus\n         * @property {boolean} state Is interception on?\n         * @property {Date} setAt Time at which we changed this status object\n         * @property {Date} offTill Time until when the interception turned off,\n         * less or equal to current time if interception is on\n         * @member {settingsStatus} UserSettings#status The current interception status, it has three fields of its own\n         */\n        this._status = {\n            state: true,\n            setAt: new Date(),\n            offTill: new Date()\n        };\n        /** @member {object} UserSettings#mode The current mode of the Distraction Shield's interception */\n        this._mode = constants.modes.lazy;\n        /** @member {int} UserSettings#interceptionInterval Amount of minutes user is allowed to browse after completing an exercise */\n        this._interceptionInterval = 1;\n        /** @member {string} UserSettings#UUID The user's current UUID, used for statistics and logging */\n        this._UUID = id;\n        /** @member {boolean} UserSettings#collectData the value of the data collection checkbox on the optionsPage */\n        this._collectData = true;\n    }\n\n    set interceptionInterval(val) { this._interceptionInterval = val; }\n    get interceptionInterval() { return this._interceptionInterval; }\n\n    set mode(newMode) { this._mode = newMode; }\n    get mode() { return this._mode; }\n\n    set collectData (collectData) { this._collectData = collectData; }\n    get collectData () { return this._collectData; }\n\n    set status(newStatus) { this._status = newStatus; }\n    get status() { return this._status; }\n\n    set offTill(time) { this._status.offTill = time; }\n    get offTill() { return this._status.offTill; }\n\n    set UUID(uuid) {this._UUID = uuid;}\n    get UUID() { return this._UUID;}\n\n    isInterceptionOn() { return this.status.state; }\n\n    /**\n     * Turn the interception back on\n     * @function UserSettings#turnOn\n     */\n    turnOn() {\n        if (!this.isInterceptionOn()) {\n            this.status = {state: true, setAt: new Date(), offTill: new Date()};\n        } else {\n            console.log(\"Already turned on, should not happen!\");\n        }\n    }\n\n    /**\n     * Turn interception off. The timer variable is for deciding whether we want to initiate a javascript timeout.\n     * Which will automatically turn the interception back on after it stops. This nonly happens in the background, because\n     * third party pages might close while the timer runs. Which makes the turning off and on of the interception go wrong.\n     * @param {boolean} timer should we set a timer, for when to turn on? (true for background, false for other (third party) page)\n     * @function UserSettings#turnOff\n     */\n    turnOff(timer) {\n        if (this.isInterceptionOn()) {\n            this.status = {state: false, setAt: new Date(), offTill: this.status.offTill};\n            if (timer) {\n                this.setTimer();\n            }\n        } else {\n            console.log(\"Already turned off, should not happen!\");\n        }\n    }\n\n    /**\n     * Turns extension off for the specified amount of minutes\n     * @param {int} minutes amount of minutes that interception needs to be off\n     * @param {boolean} timer should we set a timer, for when to turn on? (true for background, false for other (third party) page)\n     * @function UserSettings#turnOffFor\n     */\n    turnOffFor(minutes, timer) {\n        let curDate = new Date();\n        this.offTill = new Date(curDate.setMinutes(minutes + curDate.getMinutes()));\n        this.turnOff(timer);\n    }\n\n    /**\n     * Turns interception off until 00:00:00 the next day.\n     * @param {boolean} timer should we set a timer, for when to turn on? (true for background, false for other (third party) page)\n     * @function UserSettings#turnOffForDay\n     */\n    turnOffForDay(timer) {\n        this.offTill = new Date(new Date().setHours(24, 0, 0, 0));\n        this.turnOff(timer);\n    }\n\n    /**\n     * Turn the interception of the extension back on and update the storage to the new settingObject\n     * @function UserSettings#turnExtensionBackOn\n     */\n    turnExtensionBackOn() {\n        return () => {\n            if (!this.isInterceptionOn()) {\n                this.turnOn();\n                storage.setSettings(this);\n            }\n        };\n    }\n\n    /**\n     * Run a timer until we need to turn interception back on\n     * @function UserSettings#setTimer\n     * @private\n     */\n    setTimer() {\n        let timerInMS = this.status.offTill - new Date();\n        setTimeout(this.turnExtensionBackOn(), timerInMS);\n    }\n\n    /**\n     * reInitialize the timer that turns interception back on, if there is need for this. Used for example when browser\n     * is closed and re-opened.\n     * @function UserSettings#reInitTimer\n     */\n    reInitTimer() {\n        if (!this.isInterceptionOn()) {\n            if (this.offTill < new Date()) {\n                this.turnOn();\n                storage.setSettings(this);\n            } else {\n                this.setTimer();\n            }\n        }\n    }\n\n    /* --------------- --------------- Serialization --------------- --------------- */\n\n    /**\n     * @param {UserSettings} settingsObject SettingsObject to serialize\n     * @returns {string} stringified UserSettings\n     * @function UserSettings#serializeSettings\n     */\n    static serializeSettings(settingsObject) {\n        return JSON.stringify(settingsObject);\n    }\n\n    /**\n     * @param {object} parsedSettingsObject SettingsObject in object form, needs to be converted to instance of SettingsObject\n     * @returns {UserSettings}\n     * @function UserSettings#parseSettingsObject\n     */\n    static parseSettingsObject(parsedSettingsObject) {\n        let s = new UserSettings();\n        parsedSettingsObject._status.setAt = new Date(parsedSettingsObject._status.setAt);\n        parsedSettingsObject._status.offTill = new Date(parsedSettingsObject._status.offTill);\n        s.status = parsedSettingsObject._status;\n        s.interceptionInterval = parsedSettingsObject._interceptionInterval;\n        s.mode = parsedSettingsObject._mode;\n        s.collectData = parsedSettingsObject._collectData;\n        s.UUID = parsedSettingsObject._UUID;\n        return s;\n    }\n\n    /**\n     * @param {string} serializedSettingsObject Stringified SettingsObject to be deserialized\n     * @returns {UserSettings}\n     * @function UserSettings#deserializeSettings\n     */\n    static deserializeSettings(serializedSettingsObject) {\n        if (serializedSettingsObject != null) {\n            let parsed = JSON.parse(serializedSettingsObject);\n            return this.parseSettingsObject(parsed);\n        }\n        return null;\n    }\n\n}\n",
    "static": true,
    "longname": "Distraction Shield/classes/UserSettings.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "class",
    "name": "UserSettings",
    "memberof": "Distraction Shield/classes/UserSettings.js",
    "static": true,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/classes/UserSettings.js",
    "importStyle": "UserSettings",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 62,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#constructor",
    "access": null,
    "description": "This object holds all the data that is connected to the user's preferences.\nFurthermore has the functionality to turn the interception part of the of extension on or off.\nSince the current state is saved here too.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@constructs",
        "tagValue": "UserSettings"
      },
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "parameter for user's uuid (default = undefined)"
      }
    ]
  },
  {
    "__docId__": 63,
    "kind": "typedef",
    "name": "settingsStatus",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": true,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings.settingsStatus",
    "access": null,
    "description": "",
    "lineNumber": 24,
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "Is interception on?"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "setAt",
        "description": "Time at which we changed this status object"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "offTill",
        "description": "Time until when the interception turned off,\nless or equal to current time if interception is on"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "settingsStatus"
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "_mode",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#_mode",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_interceptionInterval",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#_interceptionInterval",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_UUID",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#_UUID",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "_collectData",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#_collectData",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "set",
    "name": "interceptionInterval",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#interceptionInterval",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "_interceptionInterval",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#_interceptionInterval",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "get",
    "name": "interceptionInterval",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#interceptionInterval",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "set",
    "name": "mode",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#mode",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "_mode",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#_mode",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "get",
    "name": "mode",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#mode",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "set",
    "name": "collectData",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#collectData",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "_collectData",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#_collectData",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "get",
    "name": "collectData",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#collectData",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "set",
    "name": "status",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#status",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "_status",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#_status",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "get",
    "name": "status",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#status",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "set",
    "name": "offTill",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#offTill",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "get",
    "name": "offTill",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#offTill",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "set",
    "name": "UUID",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#UUID",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "_UUID",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#_UUID",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "get",
    "name": "UUID",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#UUID",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "isInterceptionOn",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#isInterceptionOn",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "turnOn",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#turnOn",
    "access": null,
    "description": "Turn the interception back on",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "UserSettings#turnOn"
      }
    ],
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "status",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#status",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"state\": boolean, \"setAt\": *, \"offTill\": *}"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "turnOff",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#turnOff",
    "access": null,
    "description": "Turn interception off. The timer variable is for deciding whether we want to initiate a javascript timeout.\nWhich will automatically turn the interception back on after it stops. This nonly happens in the background, because\nthird party pages might close while the timer runs. Which makes the turning off and on of the interception go wrong.",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "UserSettings#turnOff"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "timer",
        "description": "should we set a timer, for when to turn on? (true for background, false for other (third party) page)"
      }
    ]
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "status",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#status",
    "access": null,
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"state\": *, \"setAt\": *, \"offTill\": *}"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "turnOffFor",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#turnOffFor",
    "access": null,
    "description": "Turns extension off for the specified amount of minutes",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "UserSettings#turnOffFor"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "minutes",
        "description": "amount of minutes that interception needs to be off"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "timer",
        "description": "should we set a timer, for when to turn on? (true for background, false for other (third party) page)"
      }
    ]
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "offTill",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#offTill",
    "access": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "turnOffForDay",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#turnOffForDay",
    "access": null,
    "description": "Turns interception off until 00:00:00 the next day.",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "UserSettings#turnOffForDay"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "timer",
        "description": "should we set a timer, for when to turn on? (true for background, false for other (third party) page)"
      }
    ]
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "offTill",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#offTill",
    "access": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "turnExtensionBackOn",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#turnExtensionBackOn",
    "access": null,
    "description": "Turn the interception of the extension back on and update the storage to the new settingObject",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "UserSettings#turnExtensionBackOn"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "setTimer",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#setTimer",
    "access": "private",
    "description": "Run a timer until we need to turn interception back on",
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "UserSettings#setTimer"
      }
    ],
    "params": []
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "reInitTimer",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings#reInitTimer",
    "access": null,
    "description": "reInitialize the timer that turns interception back on, if there is need for this. Used for example when browser\nis closed and re-opened.",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "UserSettings#reInitTimer"
      }
    ],
    "params": []
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "serializeSettings",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings.serializeSettings",
    "access": null,
    "description": "",
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} stringified UserSettings"
      },
      {
        "tagName": "@function",
        "tagValue": "UserSettings#serializeSettings"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UserSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "settingsObject",
        "description": "SettingsObject to serialize"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "stringified UserSettings"
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "parseSettingsObject",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings.parseSettingsObject",
    "access": null,
    "description": "",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{UserSettings}"
      },
      {
        "tagName": "@function",
        "tagValue": "UserSettings#parseSettingsObject"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parsedSettingsObject",
        "description": "SettingsObject in object form, needs to be converted to instance of SettingsObject"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UserSettings"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "deserializeSettings",
    "memberof": "Distraction Shield/classes/UserSettings.js~UserSettings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/classes/UserSettings.js~UserSettings.deserializeSettings",
    "access": null,
    "description": "",
    "lineNumber": 183,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{UserSettings}"
      },
      {
        "tagName": "@function",
        "tagValue": "UserSettings#deserializeSettings"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serializedSettingsObject",
        "description": "Stringified SettingsObject to be deserialized"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UserSettings"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "Distraction Shield/constants.js",
    "content": "/**\n * All the constants used throughout the extension\n * @module constants\n */\n\n/* ---------- ----- background ----- ---------- */\n\n/* ---------- ----- background ----- ---------- */\nexport const zeeguuExLink = \"https://www.zeeguu.unibe.ch/practice/get-ex\";\n\nexport const zeeguuExTracker = \"www.zeeguu.unibe.ch/practice/get-ex\";\n\nexport const exerciseCompleteRegex = /(\\?|&)tds_exComplete=true/;\n\nexport const exerciseCompleteParam = \"tds_exComplete=true\";\n\nexport const tdsRedirectParam = \"?tds_redirect=\";\n\n/* ---------- ----- optionspage----- ---------- */\nexport const feedbackLink = \"https://docs.google.com/forms/d/e/1FAIpQLScHTpTaGD19HJd4d7k98FV_20-NwRV0dp9xNMWza7_1KsiGag/viewform\";\n\n/* ---------- ----- BlockedSite ----- ---------- */\nexport const FAVICONLINK = \"https://www.google.com/s2/favicons?domain=\";\n\n/* ---------- ----- export constants for statistics ----- ---------- */\n\n// The time in seconds after which a user is considered to be idle. Important for tracking the amount of time spent on a url.\n// Minimum value is 15 seconds.\nexport const idleTime = 15;\n\n// The frequency in minutes after which the tracker statistics are being saved into the storage.\nexport const trackerAlarmFrequency = 1.0;\n\n/* ---------- ----- UserSettings, inject ----- ---------- */\n/**\n * Extension interception modes.\n * @readonly\n * @enum {lazy | pro} mode\n */\nexport const modes = {\n    lazy: {\n        label: \"lazy\",\n        zeeguuText: \"You are in lazy mode. Click <a id='originalDestination'>'Skip'</a> any time to continue browsing.\"\n    },\n    pro: {\n        label: \"pro\",\n        zeeguuText: \"You are in pro mode. Complete the exercise and click the 'Take me away!' button when you are done to continue browsing.\"\n    }\n};\n\nexport const zeeguLoginLink = \"https://www.zeeguu.unibe.ch/login\";\n\nexport const tdsRedirectRegex = /[?]tds_redirect=(.*)/;\n\nexport const loginMessage = \"Please log in to get productive!\";\n\n\n/* ---------- ----- BlockedSiteList ----- ---------- */\nexport const newUrlNotUniqueError = \"Oops! You already blocked this website: \";\n\n/* ---------- ----- Whitelist ----- ----- ---------- */\n\n/**\n * A list of regexp's. If a url matches one of these it is not supposed to beblocked\n * @type {RegExp[]}\n */\nexport const whitelist = [\n    \"_\\/chrome\\/newtab\",\n    \"oauth.*\\?.*client_id\",\n    \"zeeguu.unibe.ch\"\n];\n\n/* ---------- ----- urlFormatter ----- ---------- */\nexport const INVALID_URL_MESSAGE = \"We unfortunately could not reach the site you are trying to block.\\n\" +\n    \"Are you sure the url is correct? \\n \\n\";\n\nexport const FILE_NOT_FOUND_ERROR  = 404;\nexport const SERVER_ERROR = 500;\nexport const REQUEST_ABORTED_ERROR = 0;\n\n/* -------------------- Logger constants ----------------------- */\n// time interval in minutes between sending data to server\nexport const LOGGING_INTERVAL = 1440;\n// time delay between first use of extension and data logging\nexport const LOGGING_ALARM_DELAY = 720;\n\n/**\n * Logger event types.\n * @readonly\n * @enum {string} event type\n */\nexport const logEventType = {\n    changed:'changed',\n    intercepted:'intercepted',\n    spent:'spent',\n    failed:'failed'\n};\n\n/**\n * Log types.\n * @readonly\n * @enum {string} log type\n */\n\nexport const logType = {\n    statistics:'statistics',\n    settings:'settings'\n};\n\n/* -------------------- Text Messages ----------------------- */\nexport const zeeguuInfoText = \"Hey, you tried to enter one of the sites you wanted to be protected from!\";\n\n/* -------------------- Keypress export constants ----------------------- */\n/* ---------- ----- optionsPage/htmlFunctionality ----- ---------- */\nexport const KEY_ENTER = 13;\n\n\n\n/* -------------------- Number export constants ----------------------- */\n// The amount of milliseconds in one day\nexport const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n\n/* ---------- ----- turnoffSlider ----- ---------- */\nexport const MAX_TURN_OFF_TIME = 480;\n\n/* ---------- ----- Storage constants ----- ---------- */\nexport const tds_all = null;\nexport const tds_blacklist = \"tds_blacklist\";\nexport const tds_settings = \"tds_settings\";\nexport const tds_interceptCounter = \"tds_interceptCounter\";\nexport const tds_interceptDateList = \"tds_interceptDateList\";\nexport const tds_exerciseTime = \"tds_exerciseTime\";\nexport const tds_logs = \"tds_logs\";\nexport const tds_logfile = \"tds_logfile\";\n",
    "static": true,
    "longname": "Distraction Shield/constants.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "zeeguuExLink",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~zeeguuExLink",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{zeeguuExLink}",
    "description": "All the constants used throughout the extension",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "constants"
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "zeeguuExTracker",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~zeeguuExTracker",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{zeeguuExTracker}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "exerciseCompleteRegex",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~exerciseCompleteRegex",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{exerciseCompleteRegex}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "undefined"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "exerciseCompleteParam",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~exerciseCompleteParam",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{exerciseCompleteParam}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "tdsRedirectParam",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~tdsRedirectParam",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{tdsRedirectParam}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "feedbackLink",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~feedbackLink",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{feedbackLink}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "FAVICONLINK",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~FAVICONLINK",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{FAVICONLINK}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "idleTime",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~idleTime",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{idleTime}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "trackerAlarmFrequency",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~trackerAlarmFrequency",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{trackerAlarmFrequency}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "modes",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~modes",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{modes}",
    "description": "Extension interception modes.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{lazy | pro} mode"
      }
    ],
    "type": {
      "types": [
        "{\"lazy\": *, \"pro\": *}"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "zeeguLoginLink",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~zeeguLoginLink",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{zeeguLoginLink}",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "tdsRedirectRegex",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~tdsRedirectRegex",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{tdsRedirectRegex}",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "undefined"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "loginMessage",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~loginMessage",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{loginMessage}",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "newUrlNotUniqueError",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~newUrlNotUniqueError",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{newUrlNotUniqueError}",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "whitelist",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~whitelist",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{whitelist}",
    "description": "A list of regexp's. If a url matches one of these it is not supposed to beblocked",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "RegExp[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "INVALID_URL_MESSAGE",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~INVALID_URL_MESSAGE",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{INVALID_URL_MESSAGE}",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "FILE_NOT_FOUND_ERROR",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~FILE_NOT_FOUND_ERROR",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{FILE_NOT_FOUND_ERROR}",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "SERVER_ERROR",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~SERVER_ERROR",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{SERVER_ERROR}",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "REQUEST_ABORTED_ERROR",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~REQUEST_ABORTED_ERROR",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{REQUEST_ABORTED_ERROR}",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "LOGGING_INTERVAL",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~LOGGING_INTERVAL",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{LOGGING_INTERVAL}",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "LOGGING_ALARM_DELAY",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~LOGGING_ALARM_DELAY",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{LOGGING_ALARM_DELAY}",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "logEventType",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~logEventType",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{logEventType}",
    "description": "Logger event types.",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string} event type"
      }
    ],
    "type": {
      "types": [
        "{\"changed\": string, \"intercepted\": string, \"spent\": string, \"failed\": string}"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "logType",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~logType",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{logType}",
    "description": "Log types.",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string} log type"
      }
    ],
    "type": {
      "types": [
        "{\"statistics\": string, \"settings\": string}"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "zeeguuInfoText",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~zeeguuInfoText",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{zeeguuInfoText}",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "KEY_ENTER",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~KEY_ENTER",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{KEY_ENTER}",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "oneDay",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~oneDay",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{oneDay}",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "MAX_TURN_OFF_TIME",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~MAX_TURN_OFF_TIME",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{MAX_TURN_OFF_TIME}",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "tds_all",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~tds_all",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{tds_all}",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "name": "tds_blacklist",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~tds_blacklist",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{tds_blacklist}",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "tds_settings",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~tds_settings",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{tds_settings}",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "tds_interceptCounter",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~tds_interceptCounter",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{tds_interceptCounter}",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "tds_interceptDateList",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~tds_interceptDateList",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{tds_interceptDateList}",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "tds_exerciseTime",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~tds_exerciseTime",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{tds_exerciseTime}",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "tds_logs",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~tds_logs",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{tds_logs}",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "tds_logfile",
    "memberof": "Distraction Shield/constants.js",
    "static": true,
    "longname": "Distraction Shield/constants.js~tds_logfile",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/constants.js",
    "importStyle": "{tds_logfile}",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "Distraction Shield/contentInjection/inject.js",
    "content": "import * as constants from '../constants'\nimport * as storage from '../modules/storage/storage'\nimport $ from 'jquery';\n\n\n/**\n * This module injects html to all content script matches in the manifest.\n * @module inject\n */\n\n/**\n * Check if we have come here after tds redirection, if not return, if so get mode and inject html.\n */\nfunction mainFlow() {\n    if (!constants.tdsRedirectRegex.test(window.location.href)) return;\n    storage.getMode(initBasis);\n}\n\n/**\n * Initialize the tds info panel with the proper text based on mode\n * @param {modes} mode used to set the text for the generalInfoText\n */\nfunction initBasis(mode) {\n    let message = mode.zeeguuText;\n    $.ajax({\n        url: chrome.extension.getURL('/assets/html/inject.html'),\n        type: \"GET\",\n        timeout: 5000,\n        datatype: \"html\",\n        success: function (data) {\n            let infoDiv = $.parseHTML(data);\n            $(\"body\").after(infoDiv);\n            $(\"#tds_infoDiv\").css('max-width', '800px');\n            $(\"#tds_generalInfoText\").append(constants.zeeguuInfoText);\n\n            if (window.location.href.indexOf(constants.zeeguLoginLink) != -1) {\n                if (mode.label == constants.modes.pro.label) {\n                    message = constants.loginMessage;\n                } else {\n                    message = message +\"\\n\" + constants.loginMessage;\n                }\n            }\n            $(\"#tds_modeSpecificText\").append(message);\n\n            $(\"#originalDestination\").attr(\"href\", extractDestination());\n            $(\"#aikido\").attr(\"src\",chrome.extension.getURL('aikido.png'));\n        }\n    });\n}\n\n/**\n * This function extracts the original destination from a get parameter in the current url\n * @returns {String} newUrl The url of the original destination plus a\n * get parameter indicating that the zeeguu exercise was completed. Should never return null!\n */\nfunction extractDestination() {\n    let url = window.location.href;\n    let results = constants.tdsRedirectRegex.exec(url);\n    if (!results || !results[1]) { return null; }\n    let newUrl = decodeURIComponent(results[1]);//prevent errors in browsers that dont decode\n    newUrl += (/[?]/.test(newUrl) ? \"&\" : \"?\") + \"tds_exComplete=true\";\n    return newUrl;\n}\n\nmainFlow();\n",
    "static": true,
    "longname": "Distraction Shield/contentInjection/inject.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "mainFlow",
    "memberof": "Distraction Shield/contentInjection/inject.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/contentInjection/inject.js~mainFlow",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/contentInjection/inject.js",
    "importStyle": null,
    "description": "Check if we have come here after tds redirection, if not return, if so get mode and inject html.",
    "lineNumber": 14,
    "params": []
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "initBasis",
    "memberof": "Distraction Shield/contentInjection/inject.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/contentInjection/inject.js~initBasis",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/contentInjection/inject.js",
    "importStyle": null,
    "description": "Initialize the tds info panel with the proper text based on mode",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "modes"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "used to set the text for the generalInfoText"
      }
    ]
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "extractDestination",
    "memberof": "Distraction Shield/contentInjection/inject.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/contentInjection/inject.js~extractDestination",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/contentInjection/inject.js",
    "importStyle": null,
    "description": "This function extracts the original destination from a get parameter in the current url",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} newUrl The url of the original destination plus a\nget parameter indicating that the zeeguu exercise was completed. Should never return null!"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "newUrl The url of the original destination plus a\nget parameter indicating that the zeeguu exercise was completed. Should never return null!"
    }
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "Distraction Shield/dataCollection/dataCollection.js",
    "content": "import {getSettings, setSettings} from '../modules/storage/storage'\n\n/**\n * Module to append dataCollectionFrame to a modal container\n * @module dataCollection\n */\n\n/**\n *\n * @param {JQuery|HTMLElement} modalContainer  should be the html element in which the modal frame will be loaded.\n * @param {boolean} staticModal  can be used to prevent the modal from closing on click or esc\n * @param {function} callback  callback which is called when the modal is closed.\n */\nexport function showDataCollectionModal(modalContainer, staticModal = false, callback = () => {}) {\n    modalContainer.unbind();\n    if (staticModal)\n        modalContainer.modal({\n            backdrop: 'static',\n            keyboard: false\n        });\n    modalContainer.on('shown.bs.modal', () => {\n        modalContainer.find('.modal-content').load(\"../html/dataCollectionFrame.html\", () => {\n            initDataConsentButtons(modalContainer);\n        });\n    }).modal('show');\n    modalContainer.on('hidden.bs.modal', () => {\n        modalContainer.find('.modal-content').load(\"../html/dataCollectionFrame.html\");\n        callback();\n    });\n}\n\n/**\n * Inits the checkbox by retrieving the user's current choice on data collection.\n * adds an onchanged listener to the checkbox.\n */\nfunction initDataConsentButtons(modalContainer){\n    $(\"#learn_more\").on('click', () => {\n        modalContainer.find('.modal-body').load(\"../html/dataCollectionInfo.html\");\n    });\n    getSettings(settings_object => {\n        let allowBox = $(\"#allowBox\");\n        allowBox.prop('checked', settings_object.collectData);\n        allowBox.change(() => {\n            setDataCollection($('#allowBox').is(':checked'));\n        });\n    })\n\n}\n\n/**\n * Retrieves the current settings from storage, changes the data collection parameter and stores it.\n * @param bool {boolean} the new value for the data collection parameter.\n */\nfunction setDataCollection(bool){\n    getSettings(settings_object => {\n        settings_object.collectData = bool;\n        setSettings(settings_object);\n    })\n}\n",
    "static": true,
    "longname": "Distraction Shield/dataCollection/dataCollection.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "showDataCollectionModal",
    "memberof": "Distraction Shield/dataCollection/dataCollection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/dataCollection/dataCollection.js~showDataCollectionModal",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/dataCollection/dataCollection.js",
    "importStyle": "{showDataCollectionModal}",
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "JQuery",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "modalContainer",
        "description": "should be the html element in which the modal frame will be loaded."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "staticModal",
        "description": "can be used to prevent the modal from closing on click or esc"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback which is called when the modal is closed."
      }
    ]
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "initDataConsentButtons",
    "memberof": "Distraction Shield/dataCollection/dataCollection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/dataCollection/dataCollection.js~initDataConsentButtons",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/dataCollection/dataCollection.js",
    "importStyle": null,
    "description": "Inits the checkbox by retrieving the user's current choice on data collection.\nadds an onchanged listener to the checkbox.",
    "lineNumber": 36,
    "params": [
      {
        "name": "modalContainer",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "setDataCollection",
    "memberof": "Distraction Shield/dataCollection/dataCollection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/dataCollection/dataCollection.js~setDataCollection",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/dataCollection/dataCollection.js",
    "importStyle": null,
    "description": "Retrieves the current settings from storage, changes the data collection parameter and stores it.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bool",
        "description": "{boolean} the new value for the data collection parameter."
      }
    ]
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "Distraction Shield/examples/rectangle.js",
    "content": "export default class Rectangle {\n    constructor(height, width) {\n        this.height = height;\n        this.width = width;\n    }\n\n    get surface() {\n        return this.height * this.width;\n    }\n}\n",
    "static": true,
    "longname": "Distraction Shield/examples/rectangle.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "class",
    "name": "Rectangle",
    "memberof": "Distraction Shield/examples/rectangle.js",
    "static": true,
    "longname": "Distraction Shield/examples/rectangle.js~Rectangle",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/examples/rectangle.js",
    "importStyle": "Rectangle",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 146,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Distraction Shield/examples/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/examples/rectangle.js~Rectangle#constructor",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "height",
        "types": [
          "*"
        ]
      },
      {
        "name": "width",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "height",
    "memberof": "Distraction Shield/examples/rectangle.js~Rectangle",
    "static": false,
    "longname": "Distraction Shield/examples/rectangle.js~Rectangle#height",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "width",
    "memberof": "Distraction Shield/examples/rectangle.js~Rectangle",
    "static": false,
    "longname": "Distraction Shield/examples/rectangle.js~Rectangle#width",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "get",
    "name": "surface",
    "memberof": "Distraction Shield/examples/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/examples/rectangle.js~Rectangle#surface",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "Distraction Shield/init.js",
    "content": "import {initBackground} from './background';\nimport * as storage from './modules/storage/storage';\nimport BlockedSiteList from './classes/BlockedSiteList';\nimport UserSettings from './classes/UserSettings';\nimport * as uuid from './modules/UUIDGenerator'\nimport Tracker from './modules/statistics/Tracker';\nimport * as logger from './modules/logger'\n\n\n/**\n * This is ran when the extension is loaded.\n * @mixin init\n */\n\n/**\n * This function to be fired only when the extension is installed or updated. It initializes all the data and the storage.\n * Furthermore it starts the intro tour and initializes the extension upon completion.\n * @memberOf init\n */\nchrome.runtime.onInstalled.addListener(details => {\n    storage.getAllUnParsed((output) => {\n        initBlacklist(output.tds_blacklist);\n        initInterceptCounter(output.tds_interceptCounter);\n        initInterceptDateList(output.tds_interceptDateList);\n        initExerciseTime(output.tds_exerciseTime);\n        initSettings(output.tds_settings);\n        initAlarm();\n        if (details.reason === 'install') {\n            runIntroTour();\n        }\n    });\n});\n\n/**\n * Initializes the storage with a BlockedSiteList object.\n * @param list {?BlockedSiteList} BlockedSiteList received from storage\n * @memberOf init\n */\nfunction initBlacklist(list) {\n    if (list == null) {\n        let blockedSiteListToStore = new BlockedSiteList();\n        storage.setBlacklist(blockedSiteListToStore);\n    }\n}\n\n/**\n * Initializes the storage with a BlockedSiteList object.\n * @param settings {?UserSettings} BlockedSiteList received from storage\n * @memberOf init\n */\nfunction initSettings(settings) {\n    if (settings == null) {\n        let id = uuid.generateUUID();\n        let settingsToStore = new UserSettings(id);\n        storage.setSettingsWithCallback(settingsToStore, initSession);\n    }\n}\n\n/**\n * Initializes the storage with a BlockedSiteList object.\n * @param counter {?number} BlockedSiteList received from storage\n * @memberOf init\n */\nfunction initInterceptCounter(counter) {\n    if (counter == null)\n        storage.setInterceptCounter(0);\n}\n\n/**\n * Initializes the storage with a date list.\n * @param dateList {?Array} Date list received from storage\n * @memberOf init\n */\nfunction initInterceptDateList(dateList) {\n    if (dateList == null)\n        storage.setInterceptDateList([]);\n}\n\n/**\n * Initializes the storage with an exercise time list.\n * @param exerciseTime {?Array} exercise time list received from storage\n * @memberOf init\n */\nfunction initExerciseTime(exerciseTime) {\n    if (exerciseTime == null)\n        storage.setExerciseTimeList([]);\n}\n\n/**\n * Runs the intro tour in a new tab.\n * @memberOf init\n */\nfunction runIntroTour() {\n    chrome.tabs.create({'url': chrome.runtime.getURL('/assets/html/introTour.html')});\n}\n\n/**\n * Starts the logger alarm. {@link logger}\n * @memberOf init\n */\nfunction initAlarm(){\n    logger.setAlarm();\n}\n\n/** --------------- ---- Run upon Start of session ---- ---------------*/\n\n/**\n * function which checks whether we run a normal session or the special case where the onInstalled function is called.\n * @memberOf init\n */\nstorage.getSettingsUnParsed(settings => {\n    if (settings != null)\n        initSession();\n});\n\n/**\n * function which fires upon starting the browser. Initiates the session.\n * @memberOf init\n */\nfunction initSession() {\n    storage.getSettings(settings => {\n        settings.reInitTimer();\n    });\n    let tracker = new Tracker();\n    tracker.init();\n    initBackground();\n}",
    "static": true,
    "longname": "Distraction Shield/init.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "initBlacklist",
    "memberof": "Distraction Shield/init.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/init.js~initBlacklist",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/init.js",
    "importStyle": null,
    "description": "Initializes the storage with a BlockedSiteList object.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "init"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "{?BlockedSiteList} BlockedSiteList received from storage"
      }
    ]
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "initSettings",
    "memberof": "Distraction Shield/init.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/init.js~initSettings",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/init.js",
    "importStyle": null,
    "description": "Initializes the storage with a BlockedSiteList object.",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "init"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "{?UserSettings} BlockedSiteList received from storage"
      }
    ]
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "initInterceptCounter",
    "memberof": "Distraction Shield/init.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/init.js~initInterceptCounter",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/init.js",
    "importStyle": null,
    "description": "Initializes the storage with a BlockedSiteList object.",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "init"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "counter",
        "description": "{?number} BlockedSiteList received from storage"
      }
    ]
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "initInterceptDateList",
    "memberof": "Distraction Shield/init.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/init.js~initInterceptDateList",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/init.js",
    "importStyle": null,
    "description": "Initializes the storage with a date list.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "init"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dateList",
        "description": "{?Array} Date list received from storage"
      }
    ]
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "initExerciseTime",
    "memberof": "Distraction Shield/init.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/init.js~initExerciseTime",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/init.js",
    "importStyle": null,
    "description": "Initializes the storage with an exercise time list.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "init"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "exerciseTime",
        "description": "{?Array} exercise time list received from storage"
      }
    ]
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "runIntroTour",
    "memberof": "Distraction Shield/init.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/init.js~runIntroTour",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/init.js",
    "importStyle": null,
    "description": "Runs the intro tour in a new tab.",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "init"
      }
    ],
    "params": []
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "initAlarm",
    "memberof": "Distraction Shield/init.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/init.js~initAlarm",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/init.js",
    "importStyle": null,
    "description": "Starts the logger alarm. {@link logger}",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "init"
      }
    ],
    "params": []
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "initSession",
    "memberof": "Distraction Shield/init.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/init.js~initSession",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/init.js",
    "importStyle": null,
    "description": "function which fires upon starting the browser. Initiates the session.",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "init"
      }
    ],
    "params": []
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "Distraction Shield/introTour/introTour.js",
    "content": "import {showDataCollectionModal} from '../dataCollection/dataCollection'\n\nlet id;\n\nlet tour = new Tour({\n    orphan: true,\n    steps: [{\n        path: '/assets/html/introTour.html',\n        title: \"Welcome to The Distaction Shield\",\n        content: \"Wanna know how Distraction Shield protects you ? \" +\n        \" Click <b> ‘Next’ </b> \" +\n        \"If you want to use it right away, click <b>‘End tour’</b>\",\n    }, {\n        path: '/assets/html/introTour.html',\n        element: \"#tourID\",\n        title: \"Tooltip\",\n        content: \"This is the tooltip button. Clicking on this button opens the <b> tooltip menu </b>, from where you can control\" +\n        \" The Distraction Shield. We'll have a look at it now. Click <b>'Next'</b> to continue.\",\n        placement: \"bottom\"\n    }, {\n        path: '/assets/html/tooltipcopy.html',\n        element: \"#saveBtn\",\n        title: \"Save Button\",\n        content: \"Clicking this button will add the current website to <b> your personal blacklist </b>. \" +\n        \"Now, when you will enter this website you will be redirected. This helps you add all your  \" + \"\" +\n        \"sites to a blacklist <b>fast and easy</b>. Click <b>'Next'</b> to continue. \",\n        placement: \"left\"\n    }, {\n        path: '/assets/html/tooltipcopy.html',\n        element: \"#statisticsBtn\",\n        title: \"Statistics Button\",\n        content: \"Wanna know <b>how much time </b> you save? Click here and find interesting <b>statistics</b>.\",\n        placement: \"left\"\n    }, {\n        path: '/assets/html/tooltipcopy.html',\n        element: \"#optionsBtn\",\n        title: \"Options Button\",\n        content: \"Do you want to <b>customize your experience</b>? <br> By pressing this button you can open the <b>options page</b>.\",\n        placement: \"left\"\n    }, {\n        path: '/assets/html/optionscopy.html',\n        element: \"#modeSelector\",\n        title: \"Modes\",\n        content: \"Here you can select which <b>mode</b> you want The Distraction Shield to use. <br>\" +\n        \"Do you feel <b>Lazy</b>? With this mode you will always have the option of <b>skipping your exercise</b>. <br>\" +\n        \" With <b>Pro</b>, you will <b>make the most of your time</b>, cause every time you enter one of your blocked\" +\n        \" sites, you will <b>have to solve a set of exercises </b>.\",\n        placement: \"left\"\n    }, {\n        path: '/assets/html/optionscopy.html',\n        element: \"#interval-slider\",\n        title: \"Interval Slider\",\n        content: \"Use the slider to chose <b>how often</b> you want to be redirected. <br> \" +\n        \"<i> For example if you chose 10 minutes, \" +\n        \"after being redirected once, you will not be redirected again for another 10 minutes. </i>\",\n        placement: \"right\"\n\n    }, {\n        path: '/assets/html/optionscopy.html',\n        element: \"#blacklistTable\",\n        title: \"Blacklist\",\n        content: \"Here you can see <b>the list of websites</b> that you will be redirected from.<br> You \" +\n        \"can <b>deselect</b> a site to disable redirection on that site temporarily, or <b>remove</b> it \" +\n        \"completely.\",\n        placement: \"left\"\n    }, {\n        path: '/assets/html/optionscopy.html',\n        element: \"#addUrlDiv\",\n        title: \"Add to Blacklist\",\n        content: \"You can <b>add</b> a site to the blacklist here. Just enter the address and hit <b>save</b>.\",\n        placement: \"left\"\n    }, {\n        path: '/assets/html/optionscopy.html',\n        element: \"#turnOff-slider\",\n        title: \"Turn Off\",\n        content: \"You can use this slider to <b>disable</b> The Distraction Shield temporarily. Select the\" +\n        \" amount of time you want and click <b>’Turn Off’</b>.\",\n        placement: \"bottom\"\n    }, {\n        path: '/assets/html/optionscopy.html',\n        title: \"Thank You!\",\n        content: \"Thanks for choosing The Distraction Shield and Happy Learning!\"\n    }],\n    onEnd: ()=> {\n        /**\n         * This function inits the data consent message with the parameter isStatic.\n         * This makes sure that the user does not accidentally closes the window.\n         * After this, the user is redirected to the optionspage\n         */\n        showDataCollectionModal($('#dataConsentModal'), true, () =>{\n            chrome.tabs.query({currentWindow: true, active: true}, tab => {\n                chrome.tabs.update(tab.id, {url: chrome.runtime.getURL('/assets/html/options.html')});\n            });\n        });\n    }\n});\n\n/** Initialize the tour */\ntour.init();\n\n/** Start the tour */\ntour.start();\n\n/** Restart tour link */\nif (tour.ended()) {\n    chrome.tabs.getSelected(null, tab => {\n        if (tab.url.indexOf('/assets/html/introTour.html') !== -1) {\n            tour.restart();\n        }\n    });\n}\n\n/** get current tab */\nchrome.tabs.getSelected(null, tab =>{\n    id = tab.id;\n});\n\n/** end tour if tab closed */\nchrome.tabs.onRemoved.addListener(tabId => {\n    if (tabId === id) {\n        tour.end();\n    }\n});\n",
    "static": true,
    "longname": "Distraction Shield/introTour/introTour.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "tour",
    "memberof": "Distraction Shield/introTour/introTour.js",
    "static": true,
    "longname": "Distraction Shield/introTour/introTour.js~tour",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/introTour/introTour.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "Tour"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "Distraction Shield/modules/UUIDGenerator.js",
    "content": "/**\n * module that generates a uuid with the help of the npm package.\n * @module UUIDGenerator\n */\n\nimport uuid from 'js-uuid';\n\n/**\n * Generates a UUID using the uuid npm package\n * @returns {string} UUID in string format\n * @method generateUUID\n */\nexport function generateUUID() {\n    return uuid.v1();\n}\n",
    "static": true,
    "longname": "Distraction Shield/modules/UUIDGenerator.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "generateUUID",
    "memberof": "Distraction Shield/modules/UUIDGenerator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/UUIDGenerator.js~generateUUID",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/UUIDGenerator.js",
    "importStyle": "{generateUUID}",
    "description": "Generates a UUID using the uuid npm package",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} UUID in string format"
      },
      {
        "tagName": "@method",
        "tagValue": "generateUUID"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "UUID in string format"
    }
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "Distraction Shield/modules/blockedSiteBuilder.js",
    "content": "\n/**\n * This module is a utility used to construct and initialize instances of the BlockedSite class. This module is the\n * only right way of creating a new BlockedSiteItem.\n * @module blockedSiteBuilder\n */\n\nimport {getUrlFromServer} from \"./urlFormatter\"\nimport BlockedSite from \"../classes/BlockedSite\"\nimport {addBlockedSiteToStorage} from \"./storage/storageModifier\"\n\n/**\n * Constructs a new blockedSite instance using the given url, and passes it on using a promise\n * The only real right way of creating a new blocked site. For this it uses the BlockedSite and the urlFormatter.\n * It also adds it to the current list of blockedSites.\n * @param {string} newUrl the unformatted url of which to construct a BlockedSite\n * @method createNewBlockedSite\n */\nexport function createNewBlockedSite(newUrl) {\n    return new Promise((resolve, reject) => {\n        getUrlFromServer(newUrl, (url, title) => {\n            let blockedSite = new BlockedSite(url, title);\n            resolve(blockedSite);\n        }, (errorMessage) => { reject(errorMessage); });\n    });\n}\n\n/**\n * constructs a new BlockedSite and instantly adds it to the storage as well\n * @param {string} newUrl the unformatted url of which to construct a BlockedSite\n * @method createBlockedSiteAndAddToStorage\n */\nexport function createBlockedSiteAndAddToStorage(newUrl) {\n    return new Promise((resolve, reject) => {\n        createNewBlockedSite(newUrl)\n            .then((blockedSite) => {\n                return addBlockedSiteToStorage(blockedSite)\n                    .catch(error => {\n                        reject(error)\n                    })\n            })\n            .catch(error => {\n                reject(error)\n            });\n    });\n}\n",
    "static": true,
    "longname": "Distraction Shield/modules/blockedSiteBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "createNewBlockedSite",
    "memberof": "Distraction Shield/modules/blockedSiteBuilder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/blockedSiteBuilder.js~createNewBlockedSite",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/blockedSiteBuilder.js",
    "importStyle": "{createNewBlockedSite}",
    "description": "Constructs a new blockedSite instance using the given url, and passes it on using a promise\nThe only real right way of creating a new blocked site. For this it uses the BlockedSite and the urlFormatter.\nIt also adds it to the current list of blockedSites.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "createNewBlockedSite"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newUrl",
        "description": "the unformatted url of which to construct a BlockedSite"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "createBlockedSiteAndAddToStorage",
    "memberof": "Distraction Shield/modules/blockedSiteBuilder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/blockedSiteBuilder.js~createBlockedSiteAndAddToStorage",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/blockedSiteBuilder.js",
    "importStyle": "{createBlockedSiteAndAddToStorage}",
    "description": "constructs a new BlockedSite and instantly adds it to the storage as well",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "createBlockedSiteAndAddToStorage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newUrl",
        "description": "the unformatted url of which to construct a BlockedSite"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "Distraction Shield/modules/browserutil.js",
    "content": "/**\n * This module has some functions we'd like to have in the browser, for special casing things like opening a tab or\n * modifying user-history\n * @module browserutil\n */\n\n/**\n * This function uses the chrome tabs api to see if a tab is open with a certain url.\n * Calls the callback with: the id of the tab if a tab is open with the given url, false otherwise\n * @param {string} url Url to check for\n * @param {function} callback Function to call with the result of the search\n */\nexport function isOpenTab (url, callback) {\n    chrome.tabs.query({},(tabs) => {\n        for (let t of tabs) {\n            if (t.url == url) {\n                callback(t.id);\n                return;\n            }\n        }\n        callback(false);\n    });\n}\n\n/**\n * A function that opens a tab with a given url, only if none is open yet,\n * switches to the already open tab otherwise\n * @param {string} url Url to check for\n * @param {function} callback\n */\nexport function openTabSingleton(url, callback = () => {}) {\n    isOpenTab(url, (result) => {\n        if (result === false) {//meaning: tab not yet open\n            chrome.tabs.create({url : url});\n        } else {\n            chrome.tabs.update(result, {active: true});\n        }\n        callback();\n    });\n}\n\n/**\n * This function removes (scrubs) all entries in browserhistory that contain the free-text string query\n * @param {String} query\n */\nexport function scrubFromHistory(query) {\n    chrome.history.search({text: query}, (results) => {\n        results.forEach((x) => {\n            chrome.history.deleteUrl({url: x.url})\n        })\n    })\n}\n",
    "static": true,
    "longname": "Distraction Shield/modules/browserutil.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "isOpenTab",
    "memberof": "Distraction Shield/modules/browserutil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/browserutil.js~isOpenTab",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/browserutil.js",
    "importStyle": "{isOpenTab}",
    "description": "This function uses the chrome tabs api to see if a tab is open with a certain url.\nCalls the callback with: the id of the tab if a tab is open with the given url, false otherwise",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Url to check for"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to call with the result of the search"
      }
    ]
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "openTabSingleton",
    "memberof": "Distraction Shield/modules/browserutil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/browserutil.js~openTabSingleton",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/browserutil.js",
    "importStyle": "{openTabSingleton}",
    "description": "A function that opens a tab with a given url, only if none is open yet,\nswitches to the already open tab otherwise",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Url to check for"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "scrubFromHistory",
    "memberof": "Distraction Shield/modules/browserutil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/browserutil.js~scrubFromHistory",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/browserutil.js",
    "importStyle": "{scrubFromHistory}",
    "description": "This function removes (scrubs) all entries in browserhistory that contain the free-text string query",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "Distraction Shield/modules/dateutil.js",
    "content": "/**\n * This module is an utility to help get the correct format for dates which are used in the codebase.\n * @module dateutil\n */\n\n\n/**\n * Converts milliseconds to HH:MM:SS format\n * @param {int} ms amount of milliseconds\n */\nexport function msToHHMMSS(ms) {\n    return new Date(ms).toISOString().substr(11, 8);\n}\n\n/**\n * Converts date object to string format\n * @param {Date} date date object to format\n */\nexport function formatDate(date) {\n    return date.getDate() + \"/\" + (date.getMonth() + 1) + \"/\" + date.getFullYear();\n}\n\n/**\n * returns the current date, formatted in the correct format.\n */\nexport function getToday() {\n    let dateObject = new Date();\n    return formatDate(dateObject);\n}\n",
    "static": true,
    "longname": "Distraction Shield/modules/dateutil.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "msToHHMMSS",
    "memberof": "Distraction Shield/modules/dateutil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/dateutil.js~msToHHMMSS",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/dateutil.js",
    "importStyle": "{msToHHMMSS}",
    "description": "Converts milliseconds to HH:MM:SS format",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "ms",
        "description": "amount of milliseconds"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "function",
    "name": "formatDate",
    "memberof": "Distraction Shield/modules/dateutil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/dateutil.js~formatDate",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/dateutil.js",
    "importStyle": "{formatDate}",
    "description": "Converts date object to string format",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "date object to format"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "getToday",
    "memberof": "Distraction Shield/modules/dateutil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/dateutil.js~getToday",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/dateutil.js",
    "importStyle": "{getToday}",
    "description": "returns the current date, formatted in the correct format.",
    "lineNumber": 26,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "Distraction Shield/modules/logger.js",
    "content": "import * as storage from '../modules/storage/storage'\nimport * as constants from '../constants'\n\n/**\n * This module is meant to be used for logging actions of the user and for statistics.\n * This module retrieves the UUID, generated on install, from the storage and uses this to link data to the user anonymously.\n * The module also dumps the logs every specified time interval.\n * This is simply done by clearing the separate log lines and combining them into one file which is stored in the storage.\n * This can be retrieved using the “tds_logfile” key.\n * Also when given permission by the user (default yes), the data is sent to a specified API.\n * @module logger\n */\n\n/**\n * creates a log format \"ID + args + on time\"\n * @param event {logEventType} describes the action performed\n * @param trigger {string}  what triggered the event\n * @param value value of event, default = null\n * @param type {logType} type of the event (options, statistics ..)\n */\nexport function logToFile(event, trigger = '', value = null, type = 'undefined') {\n    let time = new Date().toJSON();\n    getUUID(id => {\n        let data = {id:id, event:event, trigger:trigger, value:value, time:time, type:type};\n        storeLog(data);\n    });\n}\n\nexport function setAlarm() {\n    chrome.alarms.create('logdump', {delayInMinutes: constants.LOGGING_ALARM_DELAY, periodInMinutes: constants.LOGGING_INTERVAL });\n    chrome.alarms.onAlarm.addListener(alarm => {\n        if (alarm.name === 'logdump') {\n            scheduledLogDump();\n        }\n    });\n}\n\n/**\n * This dumps the log from the storage to the server (if user gave permission?)\n * After that, it clears the logs.\n */\nfunction scheduledLogDump() {\n    storage.getSettings(settings_object => {\n        storage.getLogs(data => {\n            if (settings_object.collectData)\n                sendLogsTo(data);\n            dumpToFile(data);\n            clearLogs();\n        });\n    });\n\n}\n\nfunction clearLogs(){\n    storage.clearLogs();\n}\n\n/**\n * This function dumps the array of logs in a logfile containing the date & logs.\n * @param data\n */\nfunction dumpToFile(data){\n    let time = new Date().toJSON();\n    let string = `'{\"date\":${time},\"data\":${data}}'`;\n    storage.setLogFile(string);\n}\n\n/**\n * retrieves UUID from userSettings\n * @callback callback for UUID\n */\nfunction getUUID(callback){\n    storage.getSettings(data => {\n        callback(data.UUID);\n    });\n}\n\n/**\n * Append new log to existing log.\n */\nfunction storeLog(data){\n    storage.getLogs(logs => {\n        if (logs != undefined)\n            logs.push(data);\n        else\n            logs = [data];\n        storage.setLogs(logs);\n    });\n}\n\n/**\n * Sends current log file to dst\n * @param data formatted data to be sent\n */\nfunction sendLogsTo(data){\n    $.ajax({\n        headers: {\n            'content-type': 'application/json'\n        },\n        url: 'http://127.0.0.1:5000/submit', //TODO get API url to send data to\n        data: JSON.stringify(data),\n        type: \"POST\"\n    });\n}",
    "static": true,
    "longname": "Distraction Shield/modules/logger.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "logToFile",
    "memberof": "Distraction Shield/modules/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/logger.js~logToFile",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/logger.js",
    "importStyle": "{logToFile}",
    "description": "creates a log format \"ID + args + on time\"",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "{logEventType} describes the action performed"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trigger",
        "description": "{string}  what triggered the event"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value of event, default = null"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "{logType} type of the event (options, statistics ..)"
      }
    ]
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "setAlarm",
    "memberof": "Distraction Shield/modules/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/logger.js~setAlarm",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/logger.js",
    "importStyle": "{setAlarm}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "scheduledLogDump",
    "memberof": "Distraction Shield/modules/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/logger.js~scheduledLogDump",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/logger.js",
    "importStyle": null,
    "description": "This dumps the log from the storage to the server (if user gave permission?)\nAfter that, it clears the logs.",
    "lineNumber": 42,
    "params": []
  },
  {
    "__docId__": 178,
    "kind": "function",
    "name": "clearLogs",
    "memberof": "Distraction Shield/modules/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/logger.js~clearLogs",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "dumpToFile",
    "memberof": "Distraction Shield/modules/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/logger.js~dumpToFile",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/logger.js",
    "importStyle": null,
    "description": "This function dumps the array of logs in a logfile containing the date & logs.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 180,
    "kind": "function",
    "name": "getUUID",
    "memberof": "Distraction Shield/modules/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/logger.js~getUUID",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/logger.js",
    "importStyle": null,
    "description": "retrieves UUID from userSettings",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@callback",
        "tagValue": "callback for UUID"
      }
    ],
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "storeLog",
    "memberof": "Distraction Shield/modules/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/logger.js~storeLog",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/logger.js",
    "importStyle": null,
    "description": "Append new log to existing log.",
    "lineNumber": 81,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "sendLogsTo",
    "memberof": "Distraction Shield/modules/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/logger.js~sendLogsTo",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/logger.js",
    "importStyle": null,
    "description": "Sends current log file to dst",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "formatted data to be sent"
      }
    ]
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "Distraction Shield/modules/statistics/Tracker.js",
    "content": "import * as constants from '../../constants';\nimport * as exerciseTime from './exerciseTime';\nimport * as storage from '../storage/storage'\nimport BlockedSiteList from '../../classes/BlockedSiteList'\nimport StorageListener from \"../storage/StorageListener\"\nimport * as logger from '../../modules/logger'\n\nexport default class Tracker {\n\n    /**\n     * The tracker tracks whether you are currently working on exercises.\n     * Every second, the \"alarm\" is fired, and the url of the current tab is examined.\n     * If this url corresponds with the zeeguu url, the time spent on exercises counter is incremented.\n     * @constructs Tracker\n     * @class\n     */\n    constructor() {\n        /** @member {boolean} Tracker#wasIdle */\n        this.wasIdle = false;\n        /** @member {BlockedSiteList} Tracker#blockedsites */\n        this.blockedsites = new BlockedSiteList();\n        /** @member {Date} Tracker#previousTime */\n        this.previousTime = new Date();\n        /** @member {Tab} Tracker#currentTab */\n        this.currentTab = null;\n        this.getCurrentTab().then((tab) => this.currentTab = tab).catch(() => this.currentTab = null);\n    }\n\n    /**\n     * gets the current tab\n     * @returns {Promise}\n     * @function Tracker#getCurrentTab\n     */\n    getCurrentTab() {\n        return new Promise(function (resolve, reject) {\n            chrome.tabs.query({active: true, lastFocusedWindow: true}, function (tabs) {\n                if (tabs.length == 1) {\n                    resolve(tabs[0]);\n                } else {\n                    reject(\"There is no current tab.\");\n                }\n            });\n        });\n    }\n\n    /**\n     * Initialize the alarm, and initialize the idle-checker.\n     * @function Tracker#init\n     */\n    init() {\n        this.getBlockedSites();\n        new StorageListener(this.handleStorageChange.bind(this));\n\n        this.addIdleListener();\n        this.addAlarmListener();\n        this.addOnActiveTabChangeListener();\n        this.addOnTabUpdateListener();\n\n        this.createTrackerAlarm();\n    }\n\n    /**\n     * This function is called everytime the time spent on exercises or\n     * on a blocked site needs to be updated.\n     * This occurs when the trackerAlarm fires, the idleState is updated,\n     * the active tab is changed, or the tab is updated.\n     * @function Tracker#triggerUpdateTime\n     */\n    triggerUpdateTime() {\n        let tab = this.currentTab;\n        let timeSpent = new Date() - this.previousTime;\n        this.previousTime = new Date();\n        if(!this.wasIdle) {\n            if(tab) {\n                if (this.compareDomain(tab.url, constants.zeeguuExTracker)) {\n                    this.incTimeExercises(timeSpent);\n                    logger.logToFile(constants.logEventType.spent, `exercises`, `${timeSpent/1000}`, constants.logType.statistics);\n                } else {\n                    this.matchToBlockedSites(tab.url).then((site) => {\n                        this.incTimeBlockedSite(site, timeSpent);\n                        logger.logToFile(constants.logEventType.spent, `${tab.url}`, `${timeSpent/1000}`, constants.logType.statistics);\n                    });\n                }\n            }\n        } else {\n            this.wasIdle = false;\n        }\n    }\n\n    /**\n     * Creates the tracker alarm which fires every x minutes. x defined by constants.trackerAlarmFrequency\n     * @function Tracker#createTrackerAlarm\n     */\n    createTrackerAlarm(){\n        chrome.alarms.create('trackerAlarm', {periodInMinutes: constants.trackerAlarmFrequency});\n    }\n\n    /**\n     * Function which updates the idle state. If the user goes idle, triggerUpdateTime is fired, and the\n     * trackerAlarm is removed.\n     * If the user becomes active again, the triggerUpdateTime is fired,\n     * and the trackerAlarm is created again.\n     * @param idleState state received from the idleListener\n     * @function Tracker#updateIdleState\n     */\n    updateIdleState(idleState) {\n        if(idleState == \"idle\") {\n            chrome.alarms.clear(\"trackerAlarm\");\n        } else if (idleState == \"active\") {\n            this.wasIdle = true;\n            this.createTrackerAlarm();\n        }\n        this.triggerUpdateTime();\n    }\n\n    /**\n     * Adds a idleListener to the background to detect whether a user is idle or not.\n     * @function Tracker#addIdleListener\n     */\n    addIdleListener() {\n        // When the user does not input anything for 15 seconds, set the state to idle.\n        chrome.idle.setDetectionInterval(constants.idleTime);\n        chrome.idle.onStateChanged.addListener(this.updateIdleState.bind(this));\n    }\n\n    /**\n     * Adds an alarmListener to listen for the trackerAlarm. Every time the alarm ticks, the triggerUpdateTime\n     * method is fired.\n     * @function Tracker#addAlarmListener\n     */\n    addAlarmListener() {\n        chrome.alarms.onAlarm.addListener((alarm) => {\n            if(alarm && alarm.name == 'trackerAlarm') {\n                this.getCurrentTab().then((tab) => {\n                   if(tab.url === this.currentTab.url) {\n                       this.triggerUpdateTime();\n                   } else {\n                       this.currentTab = tab;\n                   }\n                }).catch(() => {\n                    this.currentTab = null;\n                })\n            }\n        });\n    }\n\n    /**\n     * Adds an onActiveTabChangeListener. When a tab becomes active, the triggerUpdateTime method is called.\n     * @function Tracker#addOnActiveTabChangeListener\n     */\n    addOnActiveTabChangeListener() {\n        chrome.tabs.onActivated.addListener((activeInfo) => {\n            chrome.tabs.get(activeInfo.tabId, (tab) => {\n                if(typeof tab !== 'undefined') {\n                    this.triggerUpdateTime();\n                    this.currentTab = tab;\n                } else {\n                    this.currentTab = null;\n                }\n                if(chrome.runtime.lastError) return;\n            })\n        });\n    }\n    /**\n     * Adds an onTabUpdateListener. When a tab updates(e.g. a new address is filled in), the triggerUpdateTime method is called.\n     * @function Tracker#addOnTabUpdateListener\n     */\n    addOnTabUpdateListener() {\n        chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n            if(changeInfo.status === 'loading') {\n                chrome.tabs.query({active: true}, (tabs) => {\n                    if(tabId == tabs[0].id) {\n                        this.triggerUpdateTime();\n                        this.currentTab = tab;\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Handles the changes received from the storageOnChangedListener.\n     * @param changes received from the storageOnChangedListener.\n     * @function Tracker#handleStorageChange\n     */\n    handleStorageChange(changes) {\n        if (constants.tds_blacklist in changes) {\n            let newBlockedSiteList = BlockedSiteList.deserializeBlockedSiteList(changes[constants.tds_blacklist].newValue);\n            // Extract the time-spent values from the this.blockedsites.\n            let timeValues = this.retrieveTimeSpent(this.blockedsites);\n            // Replace this.blockedsites with the data from the storage\n            this.blockedsites = newBlockedSiteList;\n            // Put the extracted time-spent values back into this.blockedsites\n            this.putBackTimeSpent(timeValues);\n        }\n    }\n\n    /**\n     * Get a list of the time wasted on all BlockedSites from the BlockedSiteList\n     * @param {BlockedSiteList} blockedsites\n     * @returns {Array}\n     * @function Tracker#retrieveTimeSpent\n     */\n    retrieveTimeSpent(blockedsites) {\n        let list = [];\n        blockedsites.map((item) => list.push({'domain': item.domain, 'timeSpent': item.timeSpent}));\n        return list;\n    }\n\n    /**\n     * Puts the timeValues previously extracted using the retrieveTimeSpent method back in to the\n     * {@link Tracker#blockedsites} field.\n     * @param timeValues\n     * @function Tracker#putBackTimeSpent\n     */\n    putBackTimeSpent(timeValues) {\n        this.blockedsites.map((blockedSite) => {\n            let bSite = timeValues.find((timeValue) => timeValue.domain == blockedSite.domain);\n            if (typeof bSite !== 'undefined') blockedSite.timeSpent = bSite.timeSpent;\n        });\n    }\n\n    /**\n     * adds the BlockedSiteList from the storage to {@link Tracker#blockedsites}.\n     * @function Tracker#getBlockedSites\n     */\n    getBlockedSites() {\n        storage.getBlacklistPromise().then((result) => {\n            this.blockedsites.addAllToList(result);\n        });\n    }\n\n    /**\n     * Increments the time spent on exercises using the exerciseTime module.\n     * @param timeSpent the amount by which the time spent should be incremented.\n     * @function Tracker#incTimeExercises\n     */\n    incTimeExercises(timeSpent) {\n        exerciseTime.incrementTodayExerciseTime(timeSpent);\n    }\n\n    /**\n     * Increments the timeSpent for the blockedSite inputted.\n     * @param site the blockedSite of which the timeSpent should be incremented.\n     * @param timeSpent the amount by which the time spent should be incremented.\n     * @function Tracker#incTimeBlockedSite\n     */\n    incTimeBlockedSite(site, timeSpent) {\n        site.timeSpent += timeSpent;\n        storage.setBlacklist(this.blockedsites);\n    }\n\n    /**\n     * Matches the inputted tab to the blocked sites.\n     * @param tabActive\n     * @returns {Promise} resolves to the matched blockedSite. Rejects if there is no match.\n     * @function Tracker#matchToBlockedSites\n     */\n    matchToBlockedSites(tabActive) {\n        return new Promise((resolve, reject) => {\n            let match = this.blockedsites.find((site) => this.compareDomain(tabActive, site.domain));\n            if (typeof match !== 'undefined') resolve(match);\n        });\n    }\n\n    /**\n     * Compares the domain of an url to another domain using a regex.\n     * @param url Url to be compared.\n     * @param domain Domain of which a regex is created.\n     * @returns {Boolean} containing whether the domain-regex matches the url.\n     * @function Tracker#compareDomain\n     */\n    compareDomain(url, domain) {\n        return Tracker.compareUrlToRegex(this.createRegexFromDomain(domain), url);\n    };\n\n    /**\n     * Creates a regex string which using the domain of an url.\n     * @param domain of which a regex should be created.\n     * @returns {string} regex string\n     * @function Tracker#createRegexFromDomain\n     */\n    createRegexFromDomain(domain) {\n        return \"^(http[s]?:\\\\/\\\\/)?(.*)\" + domain + \".*$\";\n    };\n\n    /**\n     * Compare regex to url.\n     * @param regex\n     * @param url\n     * @returns {Boolean} Returns true if the url matches the regex. False if they do not match.\n     * @function Tracker#compareUrlToRegex\n     */\n    static compareUrlToRegex(regex, url) {\n        return RegExp(regex).test(url);\n    }\n\n}\n",
    "static": true,
    "longname": "Distraction Shield/modules/statistics/Tracker.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "class",
    "name": "Tracker",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js",
    "static": true,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/statistics/Tracker.js",
    "importStyle": "Tracker",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 185,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#constructor",
    "access": null,
    "description": "The tracker tracks whether you are currently working on exercises.\nEvery second, the \"alarm\" is fired, and the url of the current tab is examined.\nIf this url corresponds with the zeeguu url, the time spent on exercises counter is incremented.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@constructs",
        "tagValue": "Tracker"
      },
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "wasIdle",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#wasIdle",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "blockedsites",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#blockedsites",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "previousTime",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#previousTime",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "currentTab",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#currentTab",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "getCurrentTab",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#getCurrentTab",
    "access": null,
    "description": "gets the current tab",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      },
      {
        "tagName": "@function",
        "tagValue": "Tracker#getCurrentTab"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "init",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#init",
    "access": null,
    "description": "Initialize the alarm, and initialize the idle-checker.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Tracker#init"
      }
    ],
    "params": []
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "triggerUpdateTime",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#triggerUpdateTime",
    "access": null,
    "description": "This function is called everytime the time spent on exercises or\non a blocked site needs to be updated.\nThis occurs when the trackerAlarm fires, the idleState is updated,\nthe active tab is changed, or the tab is updated.",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Tracker#triggerUpdateTime"
      }
    ],
    "params": []
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "previousTime",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#previousTime",
    "access": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "wasIdle",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#wasIdle",
    "access": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "createTrackerAlarm",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#createTrackerAlarm",
    "access": null,
    "description": "Creates the tracker alarm which fires every x minutes. x defined by constants.trackerAlarmFrequency",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Tracker#createTrackerAlarm"
      }
    ],
    "params": []
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "updateIdleState",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#updateIdleState",
    "access": null,
    "description": "Function which updates the idle state. If the user goes idle, triggerUpdateTime is fired, and the\ntrackerAlarm is removed.\nIf the user becomes active again, the triggerUpdateTime is fired,\nand the trackerAlarm is created again.",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Tracker#updateIdleState"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "idleState",
        "description": "state received from the idleListener"
      }
    ]
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "wasIdle",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#wasIdle",
    "access": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "addIdleListener",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#addIdleListener",
    "access": null,
    "description": "Adds a idleListener to the background to detect whether a user is idle or not.",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Tracker#addIdleListener"
      }
    ],
    "params": []
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "addAlarmListener",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#addAlarmListener",
    "access": null,
    "description": "Adds an alarmListener to listen for the trackerAlarm. Every time the alarm ticks, the triggerUpdateTime\nmethod is fired.",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Tracker#addAlarmListener"
      }
    ],
    "params": []
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "currentTab",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#currentTab",
    "access": null,
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "currentTab",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#currentTab",
    "access": null,
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "addOnActiveTabChangeListener",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#addOnActiveTabChangeListener",
    "access": null,
    "description": "Adds an onActiveTabChangeListener. When a tab becomes active, the triggerUpdateTime method is called.",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Tracker#addOnActiveTabChangeListener"
      }
    ],
    "params": []
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "currentTab",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#currentTab",
    "access": null,
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "currentTab",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#currentTab",
    "access": null,
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "addOnTabUpdateListener",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#addOnTabUpdateListener",
    "access": null,
    "description": "Adds an onTabUpdateListener. When a tab updates(e.g. a new address is filled in), the triggerUpdateTime method is called.",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Tracker#addOnTabUpdateListener"
      }
    ],
    "params": []
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "currentTab",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#currentTab",
    "access": null,
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "handleStorageChange",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#handleStorageChange",
    "access": null,
    "description": "Handles the changes received from the storageOnChangedListener.",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Tracker#handleStorageChange"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "changes",
        "description": "received from the storageOnChangedListener."
      }
    ]
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "blockedsites",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#blockedsites",
    "access": null,
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "retrieveTimeSpent",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#retrieveTimeSpent",
    "access": null,
    "description": "Get a list of the time wasted on all BlockedSites from the BlockedSiteList",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      },
      {
        "tagName": "@function",
        "tagValue": "Tracker#retrieveTimeSpent"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BlockedSiteList"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedsites",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "putBackTimeSpent",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#putBackTimeSpent",
    "access": null,
    "description": "Puts the timeValues previously extracted using the retrieveTimeSpent method back in to the\n{@link Tracker#blockedsites} field.",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Tracker#putBackTimeSpent"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "timeValues",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "getBlockedSites",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#getBlockedSites",
    "access": null,
    "description": "adds the BlockedSiteList from the storage to {@link Tracker#blockedsites}.",
    "lineNumber": 227,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Tracker#getBlockedSites"
      }
    ],
    "params": []
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "incTimeExercises",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#incTimeExercises",
    "access": null,
    "description": "Increments the time spent on exercises using the exerciseTime module.",
    "lineNumber": 238,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Tracker#incTimeExercises"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "timeSpent",
        "description": "the amount by which the time spent should be incremented."
      }
    ]
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "incTimeBlockedSite",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#incTimeBlockedSite",
    "access": null,
    "description": "Increments the timeSpent for the blockedSite inputted.",
    "lineNumber": 248,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Tracker#incTimeBlockedSite"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "site",
        "description": "the blockedSite of which the timeSpent should be incremented."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "timeSpent",
        "description": "the amount by which the time spent should be incremented."
      }
    ]
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "matchToBlockedSites",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#matchToBlockedSites",
    "access": null,
    "description": "Matches the inputted tab to the blocked sites.",
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} resolves to the matched blockedSite. Rejects if there is no match."
      },
      {
        "tagName": "@function",
        "tagValue": "Tracker#matchToBlockedSites"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tabActive",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "resolves to the matched blockedSite. Rejects if there is no match."
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "compareDomain",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#compareDomain",
    "access": null,
    "description": "Compares the domain of an url to another domain using a regex.",
    "lineNumber": 273,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} containing whether the domain-regex matches the url."
      },
      {
        "tagName": "@function",
        "tagValue": "Tracker#compareDomain"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Url to be compared."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "domain",
        "description": "Domain of which a regex is created."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "containing whether the domain-regex matches the url."
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "createRegexFromDomain",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker#createRegexFromDomain",
    "access": null,
    "description": "Creates a regex string which using the domain of an url.",
    "lineNumber": 283,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} regex string"
      },
      {
        "tagName": "@function",
        "tagValue": "Tracker#createRegexFromDomain"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "domain",
        "description": "of which a regex should be created."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "regex string"
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "compareUrlToRegex",
    "memberof": "Distraction Shield/modules/statistics/Tracker.js~Tracker",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/statistics/Tracker.js~Tracker.compareUrlToRegex",
    "access": null,
    "description": "Compare regex to url.",
    "lineNumber": 294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Returns true if the url matches the regex. False if they do not match."
      },
      {
        "tagName": "@function",
        "tagValue": "Tracker#compareUrlToRegex"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "regex",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Returns true if the url matches the regex. False if they do not match."
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "Distraction Shield/modules/statistics/exerciseTime.js",
    "content": "import * as storage from '../storage/storage'\nimport * as dateutil from '../dateutil'\n\n/**\n * Increments the counter for time spent on exercises today with 'amount'.\n * When there the current day does not exist in the storage yet, initialize the counter for this day at 0.\n * @param {int} amount the amount of seconds to be added to the current date\n * @module exerciseTime\n */\nexport function incrementTodayExerciseTime(amount) {\n    storage.getExerciseTimeList().then((list) => {\n        let todayDate = dateutil.getToday();\n        let today = list.find((record) => record.date == todayDate);\n        if (typeof today === 'undefined') {\n            list.push({date: todayDate, timeSpent: amount});\n        } else {\n            today.timeSpent += amount;\n        }\n        return list;\n    }).then((list) => {\n        storage.setExerciseTimeList(list);\n    });\n}",
    "static": true,
    "longname": "Distraction Shield/modules/statistics/exerciseTime.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "incrementTodayExerciseTime",
    "memberof": "Distraction Shield/modules/statistics/exerciseTime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/statistics/exerciseTime.js~incrementTodayExerciseTime",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/statistics/exerciseTime.js",
    "importStyle": "{incrementTodayExerciseTime}",
    "description": "Increments the counter for time spent on exercises today with 'amount'.\nWhen there the current day does not exist in the storage yet, initialize the counter for this day at 0.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "exerciseTime"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "the amount of seconds to be added to the current date"
      }
    ]
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "Distraction Shield/modules/statistics/interception.js",
    "content": "import * as storage from '../storage/storage'\nimport * as constants from '../../constants'\nimport * as stringutil from '../stringutil'\nimport BlockedSiteList from '../../classes/BlockedSiteList'\nimport * as logger from '../../modules/logger'\n\n/**\n * This module takes care of all the data that needs to be updated when we are intercepted\n * @module interception\n */\n\n/**\n * This method goes through the interceptDateList and count how many times the user was intercepted last day,\n * last week, last month and the total amount of interceptions.\n * @param {Array} dateList the total list with all interceptions on the different days\n */\nexport function calcInterceptData(dateList) {\n    let tmp = dateList;\n    let countDay = 0, countWeek = 0, countMonth = 0, countTotal = 0;\n\n    if (tmp !== null) {\n        let firstDate = new Date();\n        let length = tmp.length;\n        for (let i = 0; i < length; i++) {\n            let secondDate = new Date(tmp.pop());\n            let diffDays = Math.floor(Math.abs((firstDate.getTime() - secondDate.getTime()) / (constants.oneDay)));\n            if (diffDays === 0) {\n                countDay++;\n            }\n            if (diffDays <= 7) {\n                countWeek++;\n            }\n            if (diffDays <= 31) {\n                countMonth++\n            }\n            countTotal++;\n        }\n    }\n    return {\n        countDay: countDay,\n        countWeek: countWeek,\n        countMonth: countMonth,\n        countTotal: countTotal\n    }\n}\n\n/**\n * Receives the url from the parameter, and searches the correct blockedSite item from the blockedsite list.\n * Then the interceptioncounter for this item is incremented by 1.\n * Also the global interceptioncounter is incremented by one.\n * @param {string} urlAddress the url to be compared with the blockedsite list to find the correct item to be incremented\n */\nexport function incrementInterceptionCounter(urlAddress) {\n    let blockedSites = new BlockedSiteList();\n    storage.getBlacklistPromise().then((result) => {\n        blockedSites.addAllToList(result);\n        for (let i = 0; i < blockedSites.length; i++) {\n            if (stringutil.wildcardStrComp(urlAddress, blockedSites[i].url)) {\n                blockedSites[i].counter = blockedSites[i].counter + 1;\n                break;\n            }\n        }\n        storage.setBlacklist(blockedSites);\n        storage.getInterceptCounter()\n            .then(function (output) {\n                let counter = output.tds_interceptCounter;\n                counter++;\n                storage.setInterceptCounter(counter);\n            });\n    });\n    logger.logToFile(constants.logEventType.intercepted, ``, `${urlAddress}`, constants.logType.statistics);\n}\n\n/**\n * Adds the current time+date to the saved time+date list\n */\nexport function addToInterceptDateList() {\n    let interceptDateList;\n    storage.getInterceptDateList()\n        .then(function (result) {\n            interceptDateList = result.tds_interceptDateList;\n        })\n        .then(function () {\n            let newDate = new Date().toDateString();\n            if (interceptDateList === null) {\n                interceptDateList = [newDate];\n            } else {\n                interceptDateList.push(newDate);\n            }\n        })\n        .then(function () {\n            storage.setInterceptDateList(interceptDateList);\n        });\n}\n\n",
    "static": true,
    "longname": "Distraction Shield/modules/statistics/interception.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "function",
    "name": "calcInterceptData",
    "memberof": "Distraction Shield/modules/statistics/interception.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/statistics/interception.js~calcInterceptData",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/statistics/interception.js",
    "importStyle": "{calcInterceptData}",
    "description": "This method goes through the interceptDateList and count how many times the user was intercepted last day,\nlast week, last month and the total amount of interceptions.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "dateList",
        "description": "the total list with all interceptions on the different days"
      }
    ],
    "return": {
      "types": [
        "{\"countDay\": *, \"countWeek\": *, \"countMonth\": *, \"countTotal\": *}"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "incrementInterceptionCounter",
    "memberof": "Distraction Shield/modules/statistics/interception.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/statistics/interception.js~incrementInterceptionCounter",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/statistics/interception.js",
    "importStyle": "{incrementInterceptionCounter}",
    "description": "Receives the url from the parameter, and searches the correct blockedSite item from the blockedsite list.\nThen the interceptioncounter for this item is incremented by 1.\nAlso the global interceptioncounter is incremented by one.",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "urlAddress",
        "description": "the url to be compared with the blockedsite list to find the correct item to be incremented"
      }
    ]
  },
  {
    "__docId__": 223,
    "kind": "function",
    "name": "addToInterceptDateList",
    "memberof": "Distraction Shield/modules/statistics/interception.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/statistics/interception.js~addToInterceptDateList",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/statistics/interception.js",
    "importStyle": "{addToInterceptDateList}",
    "description": "Adds the current time+date to the saved time+date list",
    "lineNumber": 77,
    "params": []
  },
  {
    "__docId__": 224,
    "kind": "file",
    "name": "Distraction Shield/modules/storage/StorageListener.js",
    "content": "\nexport default class StorageListener {\n    /**\n     * Adds a listener which listens for changes in the storage. Page that use data from the storage and need\n     * to be updated on change, will implement a function that defines what to do with the changes and pass\n     * it on to the constructor of this class. This method will then fire upon the change of storage.\n     * @param {function} handleStorageChange The function to fired that takes as parameter the data from the onChanged event\n     * @constructs StorageListener\n     * @class\n     */\n    constructor(handleStorageChange) {\n        chrome.storage.onChanged.addListener(changes => {\n            handleStorageChange(changes)\n        });\n    }\n}",
    "static": true,
    "longname": "Distraction Shield/modules/storage/StorageListener.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 225,
    "kind": "class",
    "name": "StorageListener",
    "memberof": "Distraction Shield/modules/storage/StorageListener.js",
    "static": true,
    "longname": "Distraction Shield/modules/storage/StorageListener.js~StorageListener",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/StorageListener.js",
    "importStyle": "StorageListener",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 226,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Distraction Shield/modules/storage/StorageListener.js~StorageListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/modules/storage/StorageListener.js~StorageListener#constructor",
    "access": null,
    "description": "Adds a listener which listens for changes in the storage. Page that use data from the storage and need\nto be updated on change, will implement a function that defines what to do with the changes and pass\nit on to the constructor of this class. This method will then fire upon the change of storage.",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@constructs",
        "tagValue": "StorageListener"
      },
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "handleStorageChange",
        "description": "The function to fired that takes as parameter the data from the onChanged event"
      }
    ]
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "Distraction Shield/modules/storage/storage.js",
    "content": "import BlockedSiteList from '../../classes/BlockedSiteList'\nimport UserSettings    from '../../classes/UserSettings'\nimport * as constants  from '../../constants'\n\n/**\n * The general API between the chrome.storage and the extension. This is the\n * part throughout which we get and set, store and retrieve, data that is concerned with the application.\n * This module has one purpose only: getting and setting\n * Due to asynchronousness this is all done through promises\n * @module storage\n */\n\n/* ---------------- General methods --------------- */\n\n/**\n * used to set items stored in the storage of the chrome api. Returns a promise\n * @param {string} dataKey key of the data to store\n * @param {string} dataValue value of data to store\n * @param {boolean} isLocal used to distinguish between using local or sync storage (default sync)\n * @method setStorage\n * @private\n */\nfunction setStorage(dataKey, dataValue, isLocal = false) {\n    return new Promise(function (resolve, reject) {\n        let storage = (isLocal ? chrome.storage.local : chrome.storage.sync);\n        let newObject = {};\n        newObject[dataKey] = dataValue;\n        storage.set(newObject, function () {\n            if (handleRuntimeError()) {\n                resolve();\n            } else {\n                reject(Error(\"Data cannot be set.\"));\n            }\n        })\n    });\n}\n\n/**\n * used to retrieve items stored from the storage of the chrome api. Returns a promise due to asynchronousness\n * @param {string} dataKey key of the data to store\n * @param {boolean} isLocal used to distinguish between using local or sync storage (default sync)\n * @method getStorage\n * @private\n */\nfunction getStorage(dataKey, isLocal = false) {\n    return new Promise(function (resolve, reject) {\n        let storage = (isLocal ? chrome.storage.local : chrome.storage.sync);\n        storage.get(dataKey, function (output) {\n            if (handleRuntimeError()) {\n                if (dataKey === null || dataKey.length > 1) {\n                    resolve(output);\n                } else {\n                    resolve(output[dataKey]);\n                }\n            } else {\n                reject(Error(\"Data cannot be found.\"));\n            }\n        })\n    });\n}\n\n/* ---------------- TDS_Storage --------------- */\n\n/**\n * Gets everything TDS stores from the storage. Also parses all data that needs to be deserialized.\n * @param {function} callback function that takes the result of this get as parameter\n * @method getAll\n */\nexport function getAll(callback) {\n    getStorage(constants.tds_all).then(function (output) {\n        output.tds_settings = UserSettings.deserializeSettings(output.tds_settings);\n        output.tds_blacklist = BlockedSiteList.deserializeBlockedSiteList(output.tds_blacklist);\n        return callback(output);\n    });\n}\n\n/**\n * Gets everything TDS stores from the storage. This does not parse any data that needs to be deserialized.\n * @param {function} callback function that takes the result of this get as parameter\n * @method getAllUnParsed\n */\nexport function getAllUnParsed(callback) {\n    getStorage(constants.tds_all).then(function (output) {\n        return callback(output);\n    });\n}\n\n/* ---------------- BlockedSiteList / Blacklist --------------- */\n\n/**\n * Gets the {@link BlockedSiteList} from the storage and parses it, before passing it on to the callback\n * @param {function} callback function that takes the result of this get as parameter\n * @method getBlacklist\n */\nexport function getBlacklist(callback) {\n    getStorage(constants.tds_blacklist).then(function (output) {\n        output.tds_blacklist = BlockedSiteList.deserializeBlockedSiteList(output.tds_blacklist);\n        return callback(output.tds_blacklist);\n    });\n}\n\n/**\n * Gets a promise to the @link BlockedSiteList in the storage\n * @returns {Promise}\n * @method getBlacklistPromise\n */\nexport function getBlacklistPromise() {\n    return getStorage(constants.tds_blacklist).then((output) =>\n        BlockedSiteList.deserializeBlockedSiteList(output.tds_blacklist)\n    );\n}\n\n/**\n * Serializes and then sets the {@link BlockedSiteList} in the storage.\n * @param {BlockedSiteList} blockedSiteList function that takes the result of this get as parameter\n * @method setBlacklist\n */\nexport function setBlacklist(blockedSiteList) {\n    let serializedList = BlockedSiteList.serializeBlockedSiteList(blockedSiteList);\n    setStorage(constants.tds_blacklist, serializedList);\n}\n\n/* ---------------- Settings Object --------------- */\n\n/**\n * Gets the {@link UserSettings} from the storage and parses it, before passing it on to the callback\n * @param {function} callback function that takes the result of this get as parameter\n * @method getSettings\n */\nexport function getSettings(callback) {\n    getStorage(constants.tds_settings).then(function (output) {\n        let deserializedSettings = UserSettings.deserializeSettings(output.tds_settings);\n        return callback(deserializedSettings);\n    });\n}\n\n/**\n * Gets an unparsed version of the {@link UserSettings} from the storage\n * @param callback function that takes this unparsed output\n * @method getSettingsUnParsed\n */\nexport function getSettingsUnParsed(callback) {\n    getStorage(constants.tds_settings).then(function (output) {\n        return callback(output.tds_settings);\n    });\n}\n\n/**\n * Serializes and then sets the {@link UserSettings} in the storage.\n * @param {UserSettings} settingsObject The object we want to set in the storage\n * @method setSettings\n */\nexport function setSettings(settingsObject) {\n    return setStorage(constants.tds_settings, UserSettings.serializeSettings(settingsObject));\n}\n\n/**\n * Serializes and then sets the {@link UserSettings} in the storage, after this it calls the callback function.\n * @param {UserSettings} settingsObject The object we want to set in the storage\n * @param {function} callback the function to be called once we return\n * @method setSettingsWithCallback\n */\nexport function setSettingsWithCallback(settingsObject, callback) {\n    let serializedSettings = UserSettings.serializeSettings(settingsObject);\n    setStorage(constants.tds_settings, serializedSettings).then(function () {\n        return callback()\n    });\n}\n\n/**\n * Gets the current mode in the settings from the storage.\n * @param {function} callback function to be called that takes the mode as parameter\n * @method getMode\n */\nexport function getMode(callback) {\n    getSettings(function (settings) {\n        callback(settings.mode);\n    });\n}\n\n/* ---------------- Statistics --------------- */\n\n/**\n * Gets the current interceptCount from the storage.\n * @method getInterceptCounter\n */\nexport function getInterceptCounter() {\n    return getStorage(constants.tds_interceptCounter);\n}\n\n/**\n * Sets the interceptCounter to a new value\n * @param {int} number the new value of the counter\n * @method setInterceptCounter\n */\nexport function setInterceptCounter(number) {\n    return setStorage(constants.tds_interceptCounter, number);\n}\n\n/**\n * Gets the current InterceptDatelist.\n * @method getInterceptDateList\n */\nexport function getInterceptDateList() {\n    return getStorage(constants.tds_interceptDateList);\n}\n\n/**\n * Sets the current dateList in the storage\n * @param {array} dateList the new value of the dateList to be set\n * @method setInterceptDateList\n */\nexport function setInterceptDateList(dateList) {\n    return setStorage(constants.tds_interceptDateList, dateList);\n}\n\n/**\n * Gets the ExerciseTime array from the storage\n * @method getExerciseTimeList\n */\nexport function getExerciseTimeList() {\n    return getStorage([constants.tds_exerciseTime]);\n}\n\n/**\n * Sets the exerciseTime array into the storage\n * @param {array} statList the new value of the exerciseTime array\n * @method setExerciseTimeList\n */\nexport function setExerciseTimeList(statList) {\n    return setStorage(constants.tds_exerciseTime, statList);\n}\n\n/* ---------------- Logger --------------- */\n\n/**\n * Gets the logs from the storage and passes it on to the callback\n * @param {function} callback takes the logs once we get them from the storage\n * @method getLogs\n */\nexport function getLogs(callback) {\n    getStorage([constants.tds_logs], true).then(output => {\n        callback(output);\n    });\n}\n\n/**\n * Sets the logs in the storage\n * @param {string} logs the logs to be stored in local.storage\n * @method setLogs\n */\nexport function setLogs(logs) {\n    return setStorage(constants.tds_logs, logs, true);\n}\n\n/**\n * Removes all the logs from the storage. This is run after we update the logfile in chrome.local.storage\n * @method clearLogs\n */\nexport function clearLogs(){\n    chrome.storage.local.remove(constants.tds_logs);\n}\n\n/**\n * Sets the logfile into the storage\n * @param {string} data the logfile to be stored in loca.storage\n * @method setLogFile\n */\nexport function setLogFile(data){\n    return setStorage(constants.tds_logfile, data, true);\n}\n\n/**\n * Checks for a runtime error.\n * @method handleRuntimeError\n * @private\n */\nfunction handleRuntimeError() {\n    if (chrome.runtime.error) {\n        console.log(\"Runtime error.\\n\" + chrome.runtime.error);\n        return false;\n    }\n    return true;\n}\n",
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "setStorage",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~setStorage",
    "access": "private",
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": null,
    "description": "used to set items stored in the storage of the chrome api. Returns a promise",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setStorage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dataKey",
        "description": "key of the data to store"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dataValue",
        "description": "value of data to store"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isLocal",
        "description": "used to distinguish between using local or sync storage (default sync)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "getStorage",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~getStorage",
    "access": "private",
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": null,
    "description": "used to retrieve items stored from the storage of the chrome api. Returns a promise due to asynchronousness",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getStorage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dataKey",
        "description": "key of the data to store"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isLocal",
        "description": "used to distinguish between using local or sync storage (default sync)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "getAll",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~getAll",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{getAll}",
    "description": "Gets everything TDS stores from the storage. Also parses all data that needs to be deserialized.",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getAll"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "function that takes the result of this get as parameter"
      }
    ]
  },
  {
    "__docId__": 231,
    "kind": "function",
    "name": "getAllUnParsed",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~getAllUnParsed",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{getAllUnParsed}",
    "description": "Gets everything TDS stores from the storage. This does not parse any data that needs to be deserialized.",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getAllUnParsed"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "function that takes the result of this get as parameter"
      }
    ]
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "getBlacklist",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~getBlacklist",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{getBlacklist}",
    "description": "Gets the {@link BlockedSiteList} from the storage and parses it, before passing it on to the callback",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getBlacklist"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "function that takes the result of this get as parameter"
      }
    ]
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "getBlacklistPromise",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~getBlacklistPromise",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{getBlacklistPromise}",
    "description": "Gets a promise to the @link BlockedSiteList in the storage",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      },
      {
        "tagName": "@method",
        "tagValue": "getBlacklistPromise"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 234,
    "kind": "function",
    "name": "setBlacklist",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~setBlacklist",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{setBlacklist}",
    "description": "Serializes and then sets the {@link BlockedSiteList} in the storage.",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setBlacklist"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BlockedSiteList"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedSiteList",
        "description": "function that takes the result of this get as parameter"
      }
    ]
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "getSettings",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~getSettings",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{getSettings}",
    "description": "Gets the {@link UserSettings} from the storage and parses it, before passing it on to the callback",
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getSettings"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "function that takes the result of this get as parameter"
      }
    ]
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "getSettingsUnParsed",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~getSettingsUnParsed",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{getSettingsUnParsed}",
    "description": "Gets an unparsed version of the {@link UserSettings} from the storage",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getSettingsUnParsed"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "function that takes this unparsed output"
      }
    ]
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "setSettings",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~setSettings",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{setSettings}",
    "description": "Serializes and then sets the {@link UserSettings} in the storage.",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setSettings"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UserSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "settingsObject",
        "description": "The object we want to set in the storage"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "setSettingsWithCallback",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~setSettingsWithCallback",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{setSettingsWithCallback}",
    "description": "Serializes and then sets the {@link UserSettings} in the storage, after this it calls the callback function.",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setSettingsWithCallback"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UserSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "settingsObject",
        "description": "The object we want to set in the storage"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "the function to be called once we return"
      }
    ]
  },
  {
    "__docId__": 239,
    "kind": "function",
    "name": "getMode",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~getMode",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{getMode}",
    "description": "Gets the current mode in the settings from the storage.",
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getMode"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "function to be called that takes the mode as parameter"
      }
    ]
  },
  {
    "__docId__": 240,
    "kind": "function",
    "name": "getInterceptCounter",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~getInterceptCounter",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{getInterceptCounter}",
    "description": "Gets the current interceptCount from the storage.",
    "lineNumber": 187,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getInterceptCounter"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "setInterceptCounter",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~setInterceptCounter",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{setInterceptCounter}",
    "description": "Sets the interceptCounter to a new value",
    "lineNumber": 196,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setInterceptCounter"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "the new value of the counter"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "getInterceptDateList",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~getInterceptDateList",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{getInterceptDateList}",
    "description": "Gets the current InterceptDatelist.",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getInterceptDateList"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "function",
    "name": "setInterceptDateList",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~setInterceptDateList",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{setInterceptDateList}",
    "description": "Sets the current dateList in the storage",
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setInterceptDateList"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "dateList",
        "description": "the new value of the dateList to be set"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "function",
    "name": "getExerciseTimeList",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~getExerciseTimeList",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{getExerciseTimeList}",
    "description": "Gets the ExerciseTime array from the storage",
    "lineNumber": 221,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getExerciseTimeList"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "setExerciseTimeList",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~setExerciseTimeList",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{setExerciseTimeList}",
    "description": "Sets the exerciseTime array into the storage",
    "lineNumber": 230,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setExerciseTimeList"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "statList",
        "description": "the new value of the exerciseTime array"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "getLogs",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~getLogs",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{getLogs}",
    "description": "Gets the logs from the storage and passes it on to the callback",
    "lineNumber": 241,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getLogs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "takes the logs once we get them from the storage"
      }
    ]
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "setLogs",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~setLogs",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{setLogs}",
    "description": "Sets the logs in the storage",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setLogs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "logs",
        "description": "the logs to be stored in local.storage"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "function",
    "name": "clearLogs",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~clearLogs",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{clearLogs}",
    "description": "Removes all the logs from the storage. This is run after we update the logfile in chrome.local.storage",
    "lineNumber": 260,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "clearLogs"
      }
    ],
    "params": []
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "setLogFile",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~setLogFile",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": "{setLogFile}",
    "description": "Sets the logfile into the storage",
    "lineNumber": 269,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setLogFile"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "the logfile to be stored in loca.storage"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "handleRuntimeError",
    "memberof": "Distraction Shield/modules/storage/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storage.js~handleRuntimeError",
    "access": "private",
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storage.js",
    "importStyle": null,
    "description": "Checks for a runtime error.",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "handleRuntimeError"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "file",
    "name": "Distraction Shield/modules/storage/storageModifier.js",
    "content": "import * as constants from '../../constants'\nimport {getBlacklistPromise, setBlacklist} from './storage'\nimport {logToFile} from '../../modules/logger'\n\n/**\n * This module is used for changing stuff inside the storage. This is used for getting, updating and setting\n * data that is supposed to be in the storage. mostly a matter of storage.get -> setData -> storage.set\n * @module storageModifier\n */\n\n\n/* ----------------  BlockedSiteList/Blacklist Modifications --------------- */\n\n/**\n *\n * @param {BlockedSite} blocked_site The item we want to add to our {@link BlockedSiteList} in the storage\n * @returns {Promise} Promise that is either resolved or rejected. If rejected passes the type of error. (catch with Promise.catch)\n * @method addBlockedSiteToStorage\n */\nexport function addBlockedSiteToStorage(blocked_site) {\n    return getBlacklistPromise().then(blockedSiteList => {\n        if (blockedSiteList.addToList(blocked_site)){\n            logToFile(constants.logEventType.changed, blocked_site.name,'added', constants.logType.settings);\n            return setBlacklist(blockedSiteList);\n        } else\n            return Promise.reject(constants.newUrlNotUniqueError + blocked_site.domain);\n    });\n}\n\n/**\n *\n * @param {BlockedSite} blocked_site The item we want to remove from our {@link BlockedSiteList} in the storage\n * @returns {Promise} Promise that is either resolved or rejected. If rejected passes the type of error. (catch with Promise.catch)\n * @method removeBlockedSiteFromStorage\n */\nexport function removeBlockedSiteFromStorage(blocked_site) {\n    return getBlacklistPromise().then(blockedSiteList => {\n        blockedSiteList.removeFromList(blocked_site);\n        logToFile(constants.logEventType.changed, blocked_site.name, 'removed', constants.logType.settings);\n        return setBlacklist(blockedSiteList);\n    });\n}\n\n/**\n *\n * @param {BlockedSite} blocked_site The item we want to add to update in our {@link BlockedSiteList} in the storage\n * @returns {Promise} Promise that is either resolved or rejected. If rejected passes the type of error. (catch with Promise.catch)\n * @method updateBlockedSiteInStorage\n */\nexport function updateBlockedSiteInStorage(blocked_site) {\n    return getBlacklistPromise().then(blockedSiteList => {\n        blockedSiteList.updateInList(blocked_site);\n        return setBlacklist(blockedSiteList);\n    });\n}\n",
    "static": true,
    "longname": "Distraction Shield/modules/storage/storageModifier.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "addBlockedSiteToStorage",
    "memberof": "Distraction Shield/modules/storage/storageModifier.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storageModifier.js~addBlockedSiteToStorage",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storageModifier.js",
    "importStyle": "{addBlockedSiteToStorage}",
    "description": "",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Promise that is either resolved or rejected. If rejected passes the type of error. (catch with Promise.catch)"
      },
      {
        "tagName": "@method",
        "tagValue": "addBlockedSiteToStorage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BlockedSite"
        ],
        "spread": false,
        "optional": false,
        "name": "blocked_site",
        "description": "The item we want to add to our {@link BlockedSiteList} in the storage"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Promise that is either resolved or rejected. If rejected passes the type of error. (catch with Promise.catch)"
    }
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "removeBlockedSiteFromStorage",
    "memberof": "Distraction Shield/modules/storage/storageModifier.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storageModifier.js~removeBlockedSiteFromStorage",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storageModifier.js",
    "importStyle": "{removeBlockedSiteFromStorage}",
    "description": "",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Promise that is either resolved or rejected. If rejected passes the type of error. (catch with Promise.catch)"
      },
      {
        "tagName": "@method",
        "tagValue": "removeBlockedSiteFromStorage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BlockedSite"
        ],
        "spread": false,
        "optional": false,
        "name": "blocked_site",
        "description": "The item we want to remove from our {@link BlockedSiteList} in the storage"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Promise that is either resolved or rejected. If rejected passes the type of error. (catch with Promise.catch)"
    }
  },
  {
    "__docId__": 254,
    "kind": "function",
    "name": "updateBlockedSiteInStorage",
    "memberof": "Distraction Shield/modules/storage/storageModifier.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/storage/storageModifier.js~updateBlockedSiteInStorage",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/storage/storageModifier.js",
    "importStyle": "{updateBlockedSiteInStorage}",
    "description": "",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Promise that is either resolved or rejected. If rejected passes the type of error. (catch with Promise.catch)"
      },
      {
        "tagName": "@method",
        "tagValue": "updateBlockedSiteInStorage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BlockedSite"
        ],
        "spread": false,
        "optional": false,
        "name": "blocked_site",
        "description": "The item we want to add to update in our {@link BlockedSiteList} in the storage"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Promise that is either resolved or rejected. If rejected passes the type of error. (catch with Promise.catch)"
    }
  },
  {
    "__docId__": 255,
    "kind": "file",
    "name": "Distraction Shield/modules/stringutil.js",
    "content": "/**\n * This module is a utility that is used for functions we use in more than one place in order to do things like comparison\n * @module stringutil\n */\n\n/**\n * used to compare if a string is a substring of, with ReqExp\n * @param {string} str compared with rule\n * @param {string} rule compare str to this\n * @method wildcardStrComp\n */\nexport function wildcardStrComp(str, rule) {\n    return new RegExp(\"^\" + rule.split(\"*\").join(\".*\") + \"$\").test(str);\n}\n\n/**\n * This function checks if a string url is in a given list of regexes.\n * @see {module:constants.whitelist}\n * @param {RegExp[]} regexList the list to check against\n * @param {String} url The string to check against the regexp's in regexList\n * @returns {Boolean} True if url matches one of the regexp's in regexList, false otherwise\n * @method isInRegexList\n */\nexport function isInRegexList(regexList, url) {\n    regexList = regexList.map((x) => { return new RegExp(x) });\n    let matches = regexList.map((x) => { return x.test(url) });\n    return matches.reduce((x, y) => { return x || y });\n}",
    "static": true,
    "longname": "Distraction Shield/modules/stringutil.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 256,
    "kind": "function",
    "name": "wildcardStrComp",
    "memberof": "Distraction Shield/modules/stringutil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/stringutil.js~wildcardStrComp",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/stringutil.js",
    "importStyle": "{wildcardStrComp}",
    "description": "used to compare if a string is a substring of, with ReqExp",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "wildcardStrComp"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "compared with rule"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": "compare str to this"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "isInRegexList",
    "memberof": "Distraction Shield/modules/stringutil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/stringutil.js~isInRegexList",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/stringutil.js",
    "importStyle": "{isInRegexList}",
    "description": "This function checks if a string url is in a given list of regexes.",
    "see": [
      "{module:constants.whitelist}"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if url matches one of the regexp's in regexList, false otherwise"
      },
      {
        "tagName": "@method",
        "tagValue": "isInRegexList"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "RegExp[]"
        ],
        "spread": false,
        "optional": false,
        "name": "regexList",
        "description": "the list to check against"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The string to check against the regexp's in regexList"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if url matches one of the regexp's in regexList, false otherwise"
    }
  },
  {
    "__docId__": 258,
    "kind": "file",
    "name": "Distraction Shield/modules/urlFormatter.js",
    "content": "/**\n * <pre>\n * General module which contains two functionalities:\n *      1.  It takes string versions of url's and strips them of certain\n *          parts in the url, we do this in order to be able\n *          to format them so we can do GET-requests with them.\n *      2.  We fire the aforementioned GET-request in order to retrieve\n *          an end-point url of a given url. In other words we retrieve\n *          the url we'd find when we type this into the address bar.\n * </pre>\n * It is used throughout the extension by calling the blockedSiteBuilder module. This builder will use this module in order\n * to build the correct blockedSite.\n * @module urlFormatter\n */\n\nimport * as constants from '../constants';\n\n/**\n * removes trailing space from url, if nothing is there returns url\n * @param {string} url to strip\n * @returns {string} the newly formatted url\n * @method stripOfFinalSlash\n */\nexport function stripOfFinalSlash(url) {\n    if (url[url.length - 1] == '/') {\n        url = url.slice(0, url.length - 1);\n    }\n    return url;\n}\n\n/**\n * removes scheme from url, if nothing is there returns url\n * @param {string} url to strip\n * @returns {string} the newly formatted url\n * @method stripOfScheme\n */\nexport function stripOfScheme(url) {\n    let schemeless = url;\n    if (url.indexOf(\"://\") > -1) {\n        schemeless = url.split('://')[1];\n    }\n    schemeless = stripOfFinalSlash(schemeless);\n    return schemeless;\n}\n\n/**\n * removes port from url, if nothing is there returns url\n * @param {string} url to strip\n * @returns {string} the newly formatted url\n * @method stripOfPort\n */\nexport function stripOfPort(url) {\n    let portless = [];\n    if (url.indexOf(\":\") > -1) {\n        let splittedUrl = url.split(':');\n        portless.push(splittedUrl[0]);\n        splittedUrl.shift();\n        splittedUrl = splittedUrl[0].split('/');\n        splittedUrl.shift();\n        splittedUrl = splittedUrl.join('/');\n        portless.push('/' + splittedUrl + '/');\n        url = portless.join(\"\");\n    }\n    url = stripOfFinalSlash(url);\n    return url;\n}\n\n/**\n * removes filename from url, if nothing is there returns url\n * @param {string} url to strip\n * @returns {string} the newly formatted url\n * @method stripOfFileName\n */\nexport function stripOfFileName(url) {\n    if (url.indexOf(\"/\") > -1) {\n        let nameless = url.split(\"\").reverse().join(\"\");\n        nameless = nameless.split(['/']);\n        let stripped = [];\n        for (let i = 1; i < nameless.length; i++) {\n            stripped.push('/');\n            stripped.push(nameless[i]);\n        }\n        stripped = stripped.join(\"\").split(\"\").reverse().join(\"\");\n        stripped = stripOfFinalSlash(stripped);\n        return stripped;\n    } else {\n        url = stripOfFinalSlash(url);\n        return url;\n    }\n}\n\n/**\n * @param {string} url the url of which we want the domain\n * @returns {string} the domain\n * @method getDomainOnly\n * @private\n */\nfunction getDomainOnly(url) {\n    if (url.indexOf(\"/\") > -1) {\n        return url.split(\"/\")[0];\n    } else {\n        return url;\n    }\n}\n\n/**\n * removes scheme, final slash, port and filename from url, returns tuple of new url and the domain of the url\n * @param {string} url to strip of all\n * @returns {array} a tuple of the actual url and only the domain=: \"www.website.com\"\n * @method stripOfAll\n */\nexport function stripOfAll(url) {\n    url = stripOfScheme(url);\n    url = stripOfFinalSlash(url);\n    url = stripOfPort(url);\n    url = stripOfFileName(url);\n    url = stripOfFinalSlash(url);\n    return [url, getDomainOnly(url)];\n}\n\n/**\n * @param {string} url the url to be formatted\n * @returns {string} the formatted url\n * @method formatForGetRequest\n * @private\n */\nfunction formatForGetRequest(url) {\n    let strippedUrl = stripOfAll(url);\n    return \"http://\" + strippedUrl[0];\n}\n\n/**\n * fires any valid url and gets the end destination's url and page title. These are passed as arguments in the callback\n * @param {string} url the url to check\n * @param {function} onSuccess the callback function that takes the newly formatted end-url together with it's page title as argument. This results in resolving the promise\n * @param {function} onFailure the callback function that when we encounter an error during the asynchronous request. This results in rejecting the promise\n * Used in the BlockedSiteBuilder\n * @method getUrlFromServer\n */\nexport function getUrlFromServer(url, onSuccess, onFailure) {\n    let urlToGet = formatForGetRequest(url);\n    let resolve = function (url, title) {\n        url = stripOfScheme(url);\n        url = stripOfFileName(url);\n        onSuccess(url, title);\n    };\n    httpGetAsync(urlToGet, resolve, onFailure);\n}\n\n/**\n * @param {string} theUrlToGet the url to get\n * @param {function} onSuccess the callback function that takes the newly formatted end-url together with it's page title as argument. This results in resolving the promise\n * @param {function} onFailure the callback function that when we encounter an error during the asynchronous request. This results in rejecting the promise\n * fire asynchronous get request to find the end port of the passed url\n * @method httpGetAsync\n */\nfunction httpGetAsync(theUrlToGet, onSuccess, onFailure) {\n    let xmlHttp = new XMLHttpRequest();\n    xmlHttp.open(\"GET\", theUrlToGet, true); // true for asynchronous\n    xmlHttp.onreadystatechange = function () {\n        readyStateChange(xmlHttp, onSuccess, onFailure);\n    };\n    xmlHttp.send(null);\n}\n\n/**\n * @param {XMLHttpRequest} xmlHttp the xmlhttprequest to fire\n * @param {function} onSuccess the callback function that takes the newly formatted end-url together with it's page title as argument. This results in resolving the promise\n * @param {function} onFailure the callback function that when we encounter an error during the asynchronous request. This results in rejecting the promise\n * function to be passed to the get-request\n * @method readyStateChange\n * @private\n */\nfunction readyStateChange(xmlHttp, onSuccess, onFailure) {\n    if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {\n        // simple regex to extract data from title tags, ignoring newlines, tabs and returns\n        let titleTags = (/<title.*?>(?:[\\t\\n\\r]*)([\\w\\W]*?)(?:[\\t\\n\\r]*)<\\/title>/m).exec(xmlHttp.responseText);\n        if (titleTags != null) {\n            let title = titleTags[1];\n            onSuccess(xmlHttp.responseURL, title);\n        } else {\n            onSuccess(xmlHttp.responseURL, theUrlToGet);\n        }\n    } else if (xmlHttp.readyState == 4) {\n        onFailure(errorHandler(xmlHttp.status));\n    }\n}\n\n/**\n * internal error handler\n * @method errorHandler\n * @private\n */\nfunction errorHandler(status) {\n    switch (status) {\n        case constants.FILE_NOT_FOUND_ERROR:\n            return (constants.INVALID_URL_MESSAGE + 'File not found');\n            break;\n        case constants.SERVER_ERROR:\n            return (constants.INVALID_URL_MESSAGE + 'Server error');\n            break;\n        case constants.REQUEST_ABORTED_ERROR:\n            return (constants.INVALID_URL_MESSAGE + 'Request aborted');\n            break;\n        default:\n            return (constants.INVALID_URL_MESSAGE + 'Unknown error ' + status);\n    }\n}",
    "static": true,
    "longname": "Distraction Shield/modules/urlFormatter.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "stripOfFinalSlash",
    "memberof": "Distraction Shield/modules/urlFormatter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/urlFormatter.js~stripOfFinalSlash",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/urlFormatter.js",
    "importStyle": "{stripOfFinalSlash}",
    "description": "removes trailing space from url, if nothing is there returns url",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} the newly formatted url"
      },
      {
        "tagName": "@method",
        "tagValue": "stripOfFinalSlash"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "to strip"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the newly formatted url"
    }
  },
  {
    "__docId__": 260,
    "kind": "function",
    "name": "stripOfScheme",
    "memberof": "Distraction Shield/modules/urlFormatter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/urlFormatter.js~stripOfScheme",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/urlFormatter.js",
    "importStyle": "{stripOfScheme}",
    "description": "removes scheme from url, if nothing is there returns url",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} the newly formatted url"
      },
      {
        "tagName": "@method",
        "tagValue": "stripOfScheme"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "to strip"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the newly formatted url"
    }
  },
  {
    "__docId__": 261,
    "kind": "function",
    "name": "stripOfPort",
    "memberof": "Distraction Shield/modules/urlFormatter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/urlFormatter.js~stripOfPort",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/urlFormatter.js",
    "importStyle": "{stripOfPort}",
    "description": "removes port from url, if nothing is there returns url",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} the newly formatted url"
      },
      {
        "tagName": "@method",
        "tagValue": "stripOfPort"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "to strip"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the newly formatted url"
    }
  },
  {
    "__docId__": 262,
    "kind": "function",
    "name": "stripOfFileName",
    "memberof": "Distraction Shield/modules/urlFormatter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/urlFormatter.js~stripOfFileName",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/urlFormatter.js",
    "importStyle": "{stripOfFileName}",
    "description": "removes filename from url, if nothing is there returns url",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} the newly formatted url"
      },
      {
        "tagName": "@method",
        "tagValue": "stripOfFileName"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "to strip"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the newly formatted url"
    }
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "getDomainOnly",
    "memberof": "Distraction Shield/modules/urlFormatter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/urlFormatter.js~getDomainOnly",
    "access": "private",
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/urlFormatter.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} the domain"
      },
      {
        "tagName": "@method",
        "tagValue": "getDomainOnly"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "the url of which we want the domain"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the domain"
    }
  },
  {
    "__docId__": 264,
    "kind": "function",
    "name": "stripOfAll",
    "memberof": "Distraction Shield/modules/urlFormatter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/urlFormatter.js~stripOfAll",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/urlFormatter.js",
    "importStyle": "{stripOfAll}",
    "description": "removes scheme, final slash, port and filename from url, returns tuple of new url and the domain of the url",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array} a tuple of the actual url and only the domain=: \"www.website.com\""
      },
      {
        "tagName": "@method",
        "tagValue": "stripOfAll"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "to strip of all"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "a tuple of the actual url and only the domain=: \"www.website.com\""
    }
  },
  {
    "__docId__": 265,
    "kind": "function",
    "name": "formatForGetRequest",
    "memberof": "Distraction Shield/modules/urlFormatter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/urlFormatter.js~formatForGetRequest",
    "access": "private",
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/urlFormatter.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} the formatted url"
      },
      {
        "tagName": "@method",
        "tagValue": "formatForGetRequest"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "the url to be formatted"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the formatted url"
    }
  },
  {
    "__docId__": 266,
    "kind": "function",
    "name": "getUrlFromServer",
    "memberof": "Distraction Shield/modules/urlFormatter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/urlFormatter.js~getUrlFromServer",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/modules/urlFormatter.js",
    "importStyle": "{getUrlFromServer}",
    "description": "fires any valid url and gets the end destination's url and page title. These are passed as arguments in the callback",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getUrlFromServer"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "the url to check"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "the callback function that takes the newly formatted end-url together with it's page title as argument. This results in resolving the promise"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onFailure",
        "description": "the callback function that when we encounter an error during the asynchronous request. This results in rejecting the promise\nUsed in the BlockedSiteBuilder"
      }
    ]
  },
  {
    "__docId__": 267,
    "kind": "function",
    "name": "httpGetAsync",
    "memberof": "Distraction Shield/modules/urlFormatter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/urlFormatter.js~httpGetAsync",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/urlFormatter.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "httpGetAsync"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "theUrlToGet",
        "description": "the url to get"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "the callback function that takes the newly formatted end-url together with it's page title as argument. This results in resolving the promise"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onFailure",
        "description": "the callback function that when we encounter an error during the asynchronous request. This results in rejecting the promise\nfire asynchronous get request to find the end port of the passed url"
      }
    ]
  },
  {
    "__docId__": 268,
    "kind": "function",
    "name": "readyStateChange",
    "memberof": "Distraction Shield/modules/urlFormatter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/urlFormatter.js~readyStateChange",
    "access": "private",
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/urlFormatter.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "readyStateChange"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "XMLHttpRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "xmlHttp",
        "description": "the xmlhttprequest to fire"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "the callback function that takes the newly formatted end-url together with it's page title as argument. This results in resolving the promise"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onFailure",
        "description": "the callback function that when we encounter an error during the asynchronous request. This results in rejecting the promise\nfunction to be passed to the get-request"
      }
    ]
  },
  {
    "__docId__": 269,
    "kind": "function",
    "name": "errorHandler",
    "memberof": "Distraction Shield/modules/urlFormatter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/modules/urlFormatter.js~errorHandler",
    "access": "private",
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/modules/urlFormatter.js",
    "importStyle": null,
    "description": "internal error handler",
    "lineNumber": 194,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "errorHandler"
      }
    ],
    "params": [
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "file",
    "name": "Distraction Shield/optionsPage/classes/BlacklistTable.js",
    "content": "import {removeBlockedSiteFromStorage, updateBlockedSiteInStorage} from '../../modules/storage/storageModifier'\nimport {logToFile} from '../../modules/logger'\nimport * as constants from '../../constants.js'\n\n/**\n * The table holding the blockedSites and all of its functionality.\n * Every row has the corresponding BlockedSite Object attached to it in order to have easy acces and manipulation.\n *\n * @class BlacklistTable\n * @param {html} html_element the <.table> element to which we connect this BlacklistTable\n */\nexport default class BlacklistTable {\n    constructor(html_element) {\n        this.table = html_element;\n        this.setCheckboxFunction();\n        this.setDeleteButtonFunction();\n    }\n\n    /**\n     * append html table-row to the table\n     * @param tableRow\n     * @function BlacklistTable#addToTable\n     */\n    addToTable(tableRow) {\n        tableRow.appendTo(this.table);\n    }\n\n    /**\n     * applies fadeIn effect to the adding of the table row\n     * @param tableRow\n     * @function BlacklistTable#addToTableWithFadeIn\n     */\n    addToTableWithFadeIn(tableRow) {\n        tableRow.hide().appendTo(this.table).fadeIn();\n    }\n\n    /**\n     * removes all rows from the table\n     * @function BlacklistTable#removeAllFromTable\n     */\n    removeAllFromTable(){\n        this.table.find('tr:not(:has(th))').remove();\n    }\n\n    /**\n     * this function removes all table rows, compares the old list with the new list and adds all and fades in new elements.\n     * @param newList {BlockedSiteList} the new list of blockedsites\n     * @param oldList {BlockedSiteList} the old list of blockedsites\n     * @function BlacklistTable#render\n     */\n    render(newList, oldList){\n        this.removeAllFromTable();\n        newList.forEach((value, key) => {\n            if (key in oldList)\n                this.addToTable(this.generateTableRow(value));\n            else\n                this.addToTableWithFadeIn(this.generateTableRow(value));\n        });\n    }\n\n\n    /**\n     * set functionality for all checkboxes found in every table_row\n     * @function BlacklistTable#setCheckboxFunction\n     */\n    setCheckboxFunction() {\n        this.table.on('change', 'input[type=\"checkbox\"]', data => {\n            //Clicking the checkbox automatically selects the row, so we use this to our advantage\n            let clicked_checkbox = data.target;\n            let selected_row = $(clicked_checkbox).closest('tr');\n            let selected_blockedSite = selected_row.data('blockedSite');\n            selected_blockedSite.checkboxVal = !selected_blockedSite.checkboxVal;\n            logToFile(constants.logEventType.changed, selected_blockedSite.name, (selected_blockedSite.checkboxVal ? 'enabled' : 'disabled'), constants.logType.settings);\n            updateBlockedSiteInStorage(selected_blockedSite);\n        });\n    }\n\n    /**\n     * If a delete button is clicked, the closest tr element is deleted.\n     * @function BlacklistTable#setDeleteButtonFunction\n     */\n    setDeleteButtonFunction() {\n        this.table.on('click', '.delete-button', data => {\n            let clicked_button = data.target;\n            let rowToDelete = $(clicked_button).closest('tr');\n            let blockedSiteToDelete = rowToDelete.data('blockedSite');\n            rowToDelete.fadeOut(() => removeBlockedSiteFromStorage(blockedSiteToDelete));\n        });\n    }\n\n    /**\n     * Takes a BlockedSiteObject and constructs a table row from it, together with attaching this item to the row.\n     * @param {BlockedSite} blockedSite the item for which we want to construct a TableRow\n     * @returns Table row to be inserted into the table.\n     * @function BlacklistTable#generateTableRow\n     */\n    generateTableRow(blockedSite) {\n        let tableRow =\n            $(\"<tr class='table-row' >\" +\n                \"<td width='50'>\" + blockedSite.icon + \"</td>\" +\n                \"<td class='pageTitle'>\" + blockedSite.name + \"</td>\" +\n                \"<td width='25'>\" + \"<input class='checkbox-toggle' type='checkbox' name='state'>\" + \"</td>\" +\n                \"<td width='25'>\" + \"<img class='delete-button' type='deleteButton' src='/assets/images/tableRow_delete_button.png' width='16' height='16'>\" + \"</td>\" +\n                \"</tr>\");\n        tableRow.find('.checkbox-toggle').prop('checked', blockedSite.checkboxVal);\n        //add the actual object to the html_element\n        tableRow.data('blockedSite', blockedSite);\n        return tableRow;\n    }\n}\n",
    "static": true,
    "longname": "Distraction Shield/optionsPage/classes/BlacklistTable.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 271,
    "kind": "class",
    "name": "BlacklistTable",
    "memberof": "Distraction Shield/optionsPage/classes/BlacklistTable.js",
    "static": true,
    "longname": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/classes/BlacklistTable.js",
    "importStyle": "BlacklistTable",
    "description": "The table holding the blockedSites and all of its functionality.\nEvery row has the corresponding BlockedSite Object attached to it in order to have easy acces and manipulation.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BlacklistTable"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "html"
        ],
        "spread": false,
        "optional": false,
        "name": "html_element",
        "description": "the <.table> element to which we connect this BlacklistTable"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 272,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable#constructor",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "html_element",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "table",
    "memberof": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable",
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable#table",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "addToTable",
    "memberof": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable#addToTable",
    "access": null,
    "description": "append html table-row to the table",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "BlacklistTable#addToTable"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tableRow",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "addToTableWithFadeIn",
    "memberof": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable#addToTableWithFadeIn",
    "access": null,
    "description": "applies fadeIn effect to the adding of the table row",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "BlacklistTable#addToTableWithFadeIn"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tableRow",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "removeAllFromTable",
    "memberof": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable#removeAllFromTable",
    "access": null,
    "description": "removes all rows from the table",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "BlacklistTable#removeAllFromTable"
      }
    ],
    "params": []
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "render",
    "memberof": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable#render",
    "access": null,
    "description": "this function removes all table rows, compares the old list with the new list and adds all and fades in new elements.",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "BlacklistTable#render"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newList",
        "description": "{BlockedSiteList} the new list of blockedsites"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "oldList",
        "description": "{BlockedSiteList} the old list of blockedsites"
      }
    ]
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "setCheckboxFunction",
    "memberof": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable#setCheckboxFunction",
    "access": null,
    "description": "set functionality for all checkboxes found in every table_row",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "BlacklistTable#setCheckboxFunction"
      }
    ],
    "params": []
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "setDeleteButtonFunction",
    "memberof": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable#setDeleteButtonFunction",
    "access": null,
    "description": "If a delete button is clicked, the closest tr element is deleted.",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "BlacklistTable#setDeleteButtonFunction"
      }
    ],
    "params": []
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "generateTableRow",
    "memberof": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/BlacklistTable.js~BlacklistTable#generateTableRow",
    "access": null,
    "description": "Takes a BlockedSiteObject and constructs a table row from it, together with attaching this item to the row.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Table row to be inserted into the table."
      },
      {
        "tagName": "@function",
        "tagValue": "BlacklistTable#generateTableRow"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BlockedSite"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedSite",
        "description": "the item for which we want to construct a TableRow"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Table row to be inserted into the table."
    }
  },
  {
    "__docId__": 281,
    "kind": "file",
    "name": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js",
    "content": "import * as constants from \"../../constants\"\nimport {logToFile} from '../../modules/logger'\n\n\n/**\n * class that connects a <.div> with a span and slider together with all the functionality.\n * I.E. changing colour, updating eachother's values and functionality to be added to the html_elements.\n * The structure this class wants to receive is:\n *      <pre>\n *      <.div id=sliderID>, holding all other components\n *          <.input type=range id=sliderID + \"-range\">\n *          <.span id=sliderID + \"-value\">\n *      <./div>\n *      </pre>\n *\n * @abstract\n * @class GreenToRedSlider\n * @param sliderID {string} The ID of the sliderDiv\n * @param saveFunction {function} The function that takes the newly updated value and does what is supposed to happen with it\n */\nexport default class GreenToRedSlider {\n\n    constructor(sliderID, saveFunction) {\n        if (new.target === GreenToRedSlider) {\n            throw new TypeError(\"Cannot construct instances directly, GreenToRedSlider is an abstract class\");\n        }\n        this.saveValue = saveFunction;\n        this.sliderDiv = $(sliderID);\n        this.sliderRange = $(this.sliderDiv.find(sliderID + \"-range\"));\n        this.sliderValue = $(this.sliderDiv.find(sliderID + \"-value\"));\n\n        this.setOnEventFunc();\n    }\n\n    /**\n     * sets all event functions for the GreenToRedSlider\n     * @function GreenToRedSlider#setOnEventFunc\n     * @inner\n     */\n    setOnEventFunc() {\n        this.sliderRange.on('input', () => {\n            let inputValue = this.sliderRange.val();\n            this.sliderValue.html(this.calculateHours(inputValue));\n            this.updateColor(inputValue);\n        });\n\n        this.sliderRange.on('mouseup', () => {\n            let inputValue = this.sliderRange.val();\n            logToFile(constants.logEventType.changed, `${this.constructor.name}`, `${inputValue}`, constants.logType.settings);\n            this.saveValue(inputValue);\n        });\n\n        this.sliderValue.on('blur', () => {\n            this.checkTimeValidity($(this.sliderValue).html());\n        });\n\n        this.sliderValue.keydown(event => {\n            if (event.keyCode === constants.KEY_ENTER) {\n                this.sliderValue.blur();\n                event.preventDefault();\n            }\n        });\n    }\n\n    /**\n     * Update the colour of the slider according to the inputValue\n     * @param {int} inputValue\n     * @function GreenToRedSlider#updateColor\n     * @inner\n     */\n    updateColor(inputValue) {\n        let maxSliderVal = (this.sliderRange[0]).max;\n        let redVal = Math.round(inputValue / maxSliderVal * 120);\n        let greenVal = 120 - redVal;\n        this.sliderRange.css('background', 'rgb(' + redVal + ', ' + greenVal + ',0)');\n    }\n\n    /**\n     * sets the updated value to all elements\n     * @param {int} val the new value\n     * @function GreenToRedSlider#setValue\n     * @inner\n     */\n    setValue(val) {\n        this.sliderRange.val(val);\n        this.sliderValue.html(this.calculateHours(val));\n        this.updateColor(val);\n    }\n\n    /**\n     * formats a value in minutes to Hours and minutes.\n     * @param {int} val the value to be formatted\n     * @returns {string} the formatted string\n     * @function GreenToRedSlider#calculateHours\n     * @inner\n     */\n    calculateHours(val) {\n        let hours = Math.floor(val / 60);\n        let minutes = val % 60;\n        if (minutes < 10 && hours > 0)\n            minutes = \"0\" + minutes;\n        return this.createMessage(hours, minutes, val);\n    }\n\n    createMessage(hours, minutes){\n        return (hours > 0 ? hours + \":\" + minutes + \" hours\" : minutes + \" minute(s)\");\n    }\n\n    /**\n     * function that checks the validity of the value inputted in the editable span\n     * @param {string} val string value that was inputted that needs to be checked whether correct\n     * @function GreenToRedSlider#checkTimeValidity\n     * @inner\n     */\n    checkTimeValidity(val) {\n        let regex = (/(\\d+|\\d\\:\\d{2})(?:\\s*)(h(?:our)?s?|m(?:inute|in)?s?|$)/m).exec(val);\n        if (regex !== null) {\n            if (regex[1].match(\":\")) {\n                let split = regex[1].split(\":\");\n                regex[1] = parseInt(split[0]) + parseInt(split[1]) / 60;\n            }\n            if (regex[1] > 0) {\n                if (regex[2].match(\"hour\")) {\n                    regex[1] *= 60;\n                }\n                // round minutes to a valid number.\n                regex[1] = Math.round(regex[1]);\n                this.setValue(this.sliderRange[0].max < regex[1] ? this.sliderRange[0].max : regex[1]);\n            } else {\n                this.timeInputError(val);\n            }\n        } else {\n            this.timeInputError(val);\n        }\n    }\n\n    /**\n     * error function to be fired when we fail the checkTimeValidity function\n     * @param {string} val string value that was inputted that needs to be checked whether correct\n     * @function GreenToRedSlider#timeInputError\n     * @inner\n     */\n    timeInputError(val) {\n        this.setValue(this.sliderRange.val());\n        chrome.extension.getBackgroundPage().alert(\"please input a supported time format\");\n        logToFile(constants.logEventType.failed, 'slider time input', val, constants.logType.settings);\n    }\n}",
    "static": true,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "class",
    "name": "GreenToRedSlider",
    "memberof": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js",
    "static": true,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/classes/GreenToRedSlider.js",
    "importStyle": "GreenToRedSlider",
    "description": "class that connects a <.div> with a span and slider together with all the functionality.\nI.E. changing colour, updating eachother's values and functionality to be added to the html_elements.\nThe structure this class wants to receive is:\n     <pre>\n     <.div id=sliderID>, holding all other components\n         <.input type=range id=sliderID + \"-range\">\n         <.span id=sliderID + \"-value\">\n     <./div>\n     </pre>",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "GreenToRedSlider"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "sliderID",
        "description": "{string} The ID of the sliderDiv"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "saveFunction",
        "description": "{function} The function that takes the newly updated value and does what is supposed to happen with it"
      }
    ],
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 283,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider#constructor",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "sliderID",
        "types": [
          "*"
        ]
      },
      {
        "name": "saveFunction",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "saveValue",
    "memberof": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider",
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider#saveValue",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "sliderDiv",
    "memberof": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider",
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider#sliderDiv",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "sliderRange",
    "memberof": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider",
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider#sliderRange",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "sliderValue",
    "memberof": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider",
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider#sliderValue",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "setOnEventFunc",
    "memberof": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider#setOnEventFunc",
    "access": null,
    "description": "sets all event functions for the GreenToRedSlider",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "GreenToRedSlider#setOnEventFunc"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "updateColor",
    "memberof": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider#updateColor",
    "access": null,
    "description": "Update the colour of the slider according to the inputValue",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "GreenToRedSlider#updateColor"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "inputValue",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "setValue",
    "memberof": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider#setValue",
    "access": null,
    "description": "sets the updated value to all elements",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "GreenToRedSlider#setValue"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the new value"
      }
    ]
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "calculateHours",
    "memberof": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider#calculateHours",
    "access": null,
    "description": "formats a value in minutes to Hours and minutes.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} the formatted string"
      },
      {
        "tagName": "@function",
        "tagValue": "GreenToRedSlider#calculateHours"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the value to be formatted"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the formatted string"
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "createMessage",
    "memberof": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider#createMessage",
    "access": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "hours",
        "types": [
          "*"
        ]
      },
      {
        "name": "minutes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "checkTimeValidity",
    "memberof": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider#checkTimeValidity",
    "access": null,
    "description": "function that checks the validity of the value inputted in the editable span",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "GreenToRedSlider#checkTimeValidity"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "string value that was inputted that needs to be checked whether correct"
      }
    ]
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "timeInputError",
    "memberof": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider#timeInputError",
    "access": null,
    "description": "error function to be fired when we fail the checkTimeValidity function",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "GreenToRedSlider#timeInputError"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "string value that was inputted that needs to be checked whether correct"
      }
    ]
  },
  {
    "__docId__": 295,
    "kind": "file",
    "name": "Distraction Shield/optionsPage/classes/IntervalSlider.js",
    "content": "import GreenToRedSlider from './GreenToRedSlider'\nimport * as storage from '../../modules/storage/storage'\n/**\n * Class that subclasses the GreenToRedSlider to a single purpose. This class updates the interceptionInterval\n * of the user's settings.\n *\n * @augments GreenToRedSlider\n * @class IntervalSlider\n * @param sliderID {string} The ID of the sliderDiv\n */\n\nexport default class IntervalSlider extends GreenToRedSlider {\n\n    constructor(sliderID) {\n        super(sliderID, function(value) {\n            storage.getSettings((settings_object) => {\n                settings_object.interceptionInterval = parseInt(value);\n                storage.setSettings(settings_object);\n            });\n        });\n    }\n\n}",
    "static": true,
    "longname": "Distraction Shield/optionsPage/classes/IntervalSlider.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 296,
    "kind": "class",
    "name": "IntervalSlider",
    "memberof": "Distraction Shield/optionsPage/classes/IntervalSlider.js",
    "static": true,
    "longname": "Distraction Shield/optionsPage/classes/IntervalSlider.js~IntervalSlider",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/classes/IntervalSlider.js",
    "importStyle": "IntervalSlider",
    "description": "Class that subclasses the GreenToRedSlider to a single purpose. This class updates the interceptionInterval\nof the user's settings.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@augments",
        "tagValue": "GreenToRedSlider"
      },
      {
        "tagName": "@class",
        "tagValue": "IntervalSlider"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "sliderID",
        "description": "{string} The ID of the sliderDiv"
      }
    ],
    "interface": false,
    "extends": [
      "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider"
    ]
  },
  {
    "__docId__": 297,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Distraction Shield/optionsPage/classes/IntervalSlider.js~IntervalSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/IntervalSlider.js~IntervalSlider#constructor",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "sliderID",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 298,
    "kind": "file",
    "name": "Distraction Shield/optionsPage/classes/TurnOffSlider.js",
    "content": "import GreenToRedSlider from './GreenToRedSlider'\nimport UserSettings from '../../classes/UserSettings'\nimport * as constants from '../../constants'\nimport * as storage from '../../modules/storage/storage'\nimport * as logger from '../../modules/logger'\nimport StorageListener from '../../modules/storage/StorageListener'\n\n/**\n * Subclass of the GreenToRedSlider, this also connects a button to the set of html_elements.\n * Furthermore it connects a userSettings item and fires functions according to the values of the\n * html_elements in order to manipulate the settings and let the user specify what he/she wants from the extension\n * Specifically turning the interception off or back on for a given amount of time\n *\n * @augments GreenToRedSlider\n * @class TurnOffSlider\n * @param sliderID {string} The ID of the sliderDiv\n */\nexport default class TurnOffSlider extends GreenToRedSlider {\n\n    constructor(sliderID) {\n        super(sliderID, (value) => {\n            this.selectedTime = parseInt(value);\n        });\n        this.selectedTime = 10;\n        this.offButton = $(this.sliderDiv.find(sliderID + \"-offBtn\"));\n        this.sliderRange[0].max = constants.MAX_TURN_OFF_TIME;\n        this.offButton[0].slider = this;\n        this.sliderValue.html(this.calculateHours(this.sliderRange.val()));\n        this.setValue(this.sliderRange.val());\n        this.init();\n    }\n\n    /**\n     * Initializer function for a TurnOffSlider\n     * @function TurnOffSlider#init\n     * @inner\n     */\n    init(){\n        storage.getSettings(settings_object => {\n            this.updateSettings(settings_object);\n        });\n        this.addStorageListener();\n    }\n\n    /**\n     * Create the right type of message or slider to be shown next to the turn off/on button.\n     * @param {UserSettings} settings_object the {@link UserSettings} on which we decide what to show\n     * @function TurnOffSlider#toggleShowOffMessage\n     * @inner\n     */\n    toggleShowOffMessage(settings_object) {\n        if (!settings_object.isInterceptionOn()) {\n            this.sliderValue.html(this.createOffMessage(settings_object));\n            this.sliderRange.hide();\n            this.sliderValue.parent().css('width', '50%');\n            this.sliderValue.prop('contenteditable', false);\n        } else {\n            this.sliderValue.html(this.calculateHours(this.selectedTime));\n            this.sliderRange.show();\n            this.sliderValue.parent().css('width', '30%');\n            this.sliderValue.prop('contenteditable', true);\n        }\n    }\n\n    /**\n     * Format a Date object to the correct displayable version\n     * @param {Date} date\n     * @function TurnOffSlider#formatDate\n     * @inner\n     */\n    static formatDate(date) {\n        let arr = date.toString().split(\" \");\n        return arr.splice(0, 5).join(\" \");\n    }\n\n    /**\n     * Function that overrides the {@link GreenToRedSlider} function\n     * @param {int} hours\n     * @param {int} minutes\n     * @param {int} val the value of the slider\n     * @function TurnOffSlider#createMessage\n     * @inner\n     */\n    createMessage(hours, minutes, val){\n        if (val == constants.MAX_TURN_OFF_TIME)\n            return \"for the rest of the day\";\n        return \"for \" + (hours > 0 ? hours + \":\" + minutes + \" hours.\" : minutes + \" minute(s).\");\n    }\n\n    /**\n     * Create the right type of message or slider to be shown next to the turn off/on button.\n     * @param {UserSettings} settings_object the {@link UserSettings} that we use to generate the TurnOffMessage\n     * @function TurnOffSlider#createOffMessage\n     * @inner\n     */\n    createOffMessage(settings_object) {\n        return \"Turned off until: \" + TurnOffSlider.formatDate(settings_object.status.offTill);\n    }\n\n    /**\n     * Updater function that updates the slider with the new {@link UserSettings}\n     * @param {UserSettings} userSettings the {@link UserSettings} on which we want the slider to update\n     * @function TurnOffSlider#updateSettings\n     * @inner\n     */\n    updateSettings(userSettings) {\n        this.toggleShowOffMessage(userSettings);\n        this.offButton.text(\"Turn \" + (userSettings.isInterceptionOn() ? \"Off\" : \"On\"));\n    }\n\n    /**\n     * The function to be fired when we hit the TurnOff/On button\n     * @function TurnOffSlider#offButtonFunc\n     * @inner\n     */\n    offButtonFunc() {\n        storage.getSettings(settings_object => {\n            let slider = this.slider;\n            if (settings_object.isInterceptionOn()) {\n                if (slider.selectedTime === constants.MAX_TURN_OFF_TIME) {\n                    settings_object.turnOffForDay();\n                } else {\n                    settings_object.turnOffFor(slider.selectedTime);\n                }\n            } else {\n                settings_object.turnOn();\n            }\n            storage.setSettings(settings_object);\n            logger.logToFile(constants.logEventType.changed, `extension ${(settings_object.isInterceptionOn() ? 'on' : 'off')}`,\n                (!settings_object.isInterceptionOn() ? slider.selectedTime : ``), constants.logType.settings);\n        });\n    }\n\n    /**\n     * Adds the right storage listener to this object\n     * @function TurnOffSlider#addStorageListener\n     * @inner\n     */\n    addStorageListener(){\n        new StorageListener(changes => {\n            if (constants.tds_settings in changes) {\n                chrome.extension.getBackgroundPage().console.log('changed')\n                let newSettings = UserSettings.deserializeSettings(changes[constants.tds_settings].newValue);\n                this.updateSettings(newSettings);\n            }\n        });\n    }\n\n}",
    "static": true,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "class",
    "name": "TurnOffSlider",
    "memberof": "Distraction Shield/optionsPage/classes/TurnOffSlider.js",
    "static": true,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/classes/TurnOffSlider.js",
    "importStyle": "TurnOffSlider",
    "description": "Subclass of the GreenToRedSlider, this also connects a button to the set of html_elements.\nFurthermore it connects a userSettings item and fires functions according to the values of the\nhtml_elements in order to manipulate the settings and let the user specify what he/she wants from the extension\nSpecifically turning the interception off or back on for a given amount of time",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@augments",
        "tagValue": "GreenToRedSlider"
      },
      {
        "tagName": "@class",
        "tagValue": "TurnOffSlider"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "sliderID",
        "description": "{string} The ID of the sliderDiv"
      }
    ],
    "interface": false,
    "extends": [
      "Distraction Shield/optionsPage/classes/GreenToRedSlider.js~GreenToRedSlider"
    ]
  },
  {
    "__docId__": 300,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider#constructor",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "sliderID",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "selectedTime",
    "memberof": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider",
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider#selectedTime",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "selectedTime",
    "memberof": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider",
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider#selectedTime",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "offButton",
    "memberof": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider",
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider#offButton",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "init",
    "memberof": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider#init",
    "access": null,
    "description": "Initializer function for a TurnOffSlider",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "TurnOffSlider#init"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "toggleShowOffMessage",
    "memberof": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider#toggleShowOffMessage",
    "access": null,
    "description": "Create the right type of message or slider to be shown next to the turn off/on button.",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "TurnOffSlider#toggleShowOffMessage"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UserSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "settings_object",
        "description": "the {@link UserSettings} on which we decide what to show"
      }
    ]
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "formatDate",
    "memberof": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider.formatDate",
    "access": null,
    "description": "Format a Date object to the correct displayable version",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "TurnOffSlider#formatDate"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "createMessage",
    "memberof": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider#createMessage",
    "access": null,
    "description": "Function that overrides the {@link GreenToRedSlider} function",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "TurnOffSlider#createMessage"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "hours",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "minutes",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the value of the slider"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "createOffMessage",
    "memberof": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider#createOffMessage",
    "access": null,
    "description": "Create the right type of message or slider to be shown next to the turn off/on button.",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "TurnOffSlider#createOffMessage"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UserSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "settings_object",
        "description": "the {@link UserSettings} that we use to generate the TurnOffMessage"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "updateSettings",
    "memberof": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider#updateSettings",
    "access": null,
    "description": "Updater function that updates the slider with the new {@link UserSettings}",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "TurnOffSlider#updateSettings"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UserSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "userSettings",
        "description": "the {@link UserSettings} on which we want the slider to update"
      }
    ]
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "offButtonFunc",
    "memberof": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider#offButtonFunc",
    "access": null,
    "description": "The function to be fired when we hit the TurnOff/On button",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "TurnOffSlider#offButtonFunc"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "addStorageListener",
    "memberof": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/optionsPage/classes/TurnOffSlider.js~TurnOffSlider#addStorageListener",
    "access": null,
    "description": "Adds the right storage listener to this object",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "TurnOffSlider#addStorageListener"
      },
      {
        "tagName": "@inner",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 312,
    "kind": "file",
    "name": "Distraction Shield/optionsPage/connectDataToHtml.js",
    "content": "/**\n * This file connects the data we read from storage and saved in local variables\n * to the actual html representations of this data in the optionsPage.\n * @module connectDataToHtml\n */\n\n/**\n * loads the {@link BlockedSiteList} into the {@link BlacklistTable}\n * @param {BlockedSiteList} blockedSiteList\n * @param {BlockedSiteList} table\n * @method loadHtmlBlacklist\n * @memberOf optionsPage\n */\nexport function loadHtmlBlacklist(blockedSiteList, table) {\n    blockedSiteList.forEach(value => {\n        table.addToTable(table.generateTableRow(value));\n    });\n}\n\n/**\n * reloads the BlacklistTable with the new values of the BlockedSiteList\n * @param {BlockedSiteList} newBlockedSiteList\n * @param {BlockedSiteList} oldBlockedSiteList\n * @param {BlacklistTable} table\n * @method reloadHtmlBlacklist\n * @memberOf optionsPage\n */\nexport function reloadHtmlBlacklist(newBlockedSiteList, oldBlockedSiteList, table) {\n    table.render(newBlockedSiteList, oldBlockedSiteList);\n}\n\n/**\n * sets the mode from the settingObject in the radioButton group\n * @param {object} extensionMode\n * @param {string} radioGroup\n * @method loadHtmlMode\n * @memberOf optionsPage\n */\nexport function loadHtmlMode(extensionMode, radioGroup) {\n    $(\"input[name=\" + radioGroup + \"][value=\" + extensionMode.label + \"]\").prop('checked', true);\n}\n\n/**\n * Sets the interceptionInterval from the settings to the {@link IntervalSlider}\n * @param {int} interceptInterval\n * @param {IntervalSlider} html_slider\n * @method loadHtmlInterval\n * @memberOf optionsPage\n */\nexport function loadHtmlInterval(interceptInterval, html_slider) {\n    html_slider.setValue(interceptInterval);\n}\n\n/**\n * Sets the value of the html_counter, span, to a new value\n * @param {int} count\n * @param {html} html_counter\n * @method loadHtmlInterceptCounter\n * @memberOf optionsPage\n */\nexport function loadHtmlInterceptCounter(count, html_counter) {\n    html_counter.text(count);\n}",
    "static": true,
    "longname": "Distraction Shield/optionsPage/connectDataToHtml.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 313,
    "kind": "function",
    "name": "loadHtmlBlacklist",
    "memberof": "Distraction Shield/optionsPage/connectDataToHtml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/connectDataToHtml.js~loadHtmlBlacklist",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/connectDataToHtml.js",
    "importStyle": "{loadHtmlBlacklist}",
    "description": "loads the {@link BlockedSiteList} into the {@link BlacklistTable}",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "loadHtmlBlacklist"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BlockedSiteList"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedSiteList",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BlockedSiteList"
        ],
        "spread": false,
        "optional": false,
        "name": "table",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 314,
    "kind": "function",
    "name": "reloadHtmlBlacklist",
    "memberof": "Distraction Shield/optionsPage/connectDataToHtml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/connectDataToHtml.js~reloadHtmlBlacklist",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/connectDataToHtml.js",
    "importStyle": "{reloadHtmlBlacklist}",
    "description": "reloads the BlacklistTable with the new values of the BlockedSiteList",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "reloadHtmlBlacklist"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BlockedSiteList"
        ],
        "spread": false,
        "optional": false,
        "name": "newBlockedSiteList",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BlockedSiteList"
        ],
        "spread": false,
        "optional": false,
        "name": "oldBlockedSiteList",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BlacklistTable"
        ],
        "spread": false,
        "optional": false,
        "name": "table",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 315,
    "kind": "function",
    "name": "loadHtmlMode",
    "memberof": "Distraction Shield/optionsPage/connectDataToHtml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/connectDataToHtml.js~loadHtmlMode",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/connectDataToHtml.js",
    "importStyle": "{loadHtmlMode}",
    "description": "sets the mode from the settingObject in the radioButton group",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "loadHtmlMode"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "extensionMode",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "radioGroup",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 316,
    "kind": "function",
    "name": "loadHtmlInterval",
    "memberof": "Distraction Shield/optionsPage/connectDataToHtml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/connectDataToHtml.js~loadHtmlInterval",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/connectDataToHtml.js",
    "importStyle": "{loadHtmlInterval}",
    "description": "Sets the interceptionInterval from the settings to the {@link IntervalSlider}",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "loadHtmlInterval"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "interceptInterval",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "IntervalSlider"
        ],
        "spread": false,
        "optional": false,
        "name": "html_slider",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 317,
    "kind": "function",
    "name": "loadHtmlInterceptCounter",
    "memberof": "Distraction Shield/optionsPage/connectDataToHtml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/connectDataToHtml.js~loadHtmlInterceptCounter",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/connectDataToHtml.js",
    "importStyle": "{loadHtmlInterceptCounter}",
    "description": "Sets the value of the html_counter, span, to a new value",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "loadHtmlInterceptCounter"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "html"
        ],
        "spread": false,
        "optional": false,
        "name": "html_counter",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "Distraction Shield/optionsPage/htmlFunctionality.js",
    "content": "import * as constants from '../constants'\nimport * as storage from '../modules/storage/storage'\nimport * as logger from '../modules/logger'\n\n/**\n * This file contains the specific functionality for the optionsPage and some of its elements, together with some\n * general functions to fire on html_elements.\n * This file holds all javascript functions used by the html_elements like buttons and fields.\n * Here things like, onClicked or onChanged events are monitored\n * @module htmlFunctionality\n */\n\n/* -------------------- Button Click functions ----------------------- */\n\n/**\n * Connects function to onclick property of html_item\n * @method connectButton\n * @memberOf optionsPage\n */\nexport function connectButton(html_button, method) {\n    html_button.on('click', method);\n}\n/* -------------------- Keypress events ----------------------- */\n\n/**\n * Sets all keypress functions of the optionsPage\n * @method setKeyPressFunctions\n * @memberOf optionsPage\n */\nexport function setKeyPressFunctions(html_txtFld, submitFunc) {\n    submitOnKeyPress(html_txtFld, submitFunc);\n}\n\n/**\n * connect function to ENTER key keypress of an html_element\n * @param {html} html_elem\n * @param {function} submitFunc the corresponding function to be fired\n * @method submitOnKeyPress\n * @memberOf optionsPage\n */\nfunction submitOnKeyPress(html_elem, submitFunc) {\n    html_elem.keyup((event) => {\n        if (event.keyCode === constants.KEY_ENTER) {\n            submitFunc();\n        }\n    });\n}\n\n/* -------------------- Logic for the mode selection -------------------- */\n\n/**\n * enables the user to update the mode of the extension and that these settings are synched across the entire extension\n * @param {string} buttonGroup the name of the radiobuttons\n * @method initModeSelection\n * @memberOf optionsPage\n */\nexport function initModeSelection(buttonGroup) {\n    $(\"input[name=\" + buttonGroup + \"]\").change(() => {\n        storage.getSettings((settings_object) => {\n            let selectedMode = $(\"input[name=\" + buttonGroup + \"]:checked\").val();\n            if (selectedMode === 'pro') {\n                settings_object.mode = constants.modes.pro;\n            } else {\n                settings_object.mode = constants.modes.lazy;\n            }\n            storage.setSettings(settings_object);\n            logger.logToFile(constants.logEventType.changed, `mode`, `${settings_object.mode.label}`, constants.logType.settings);\n        });\n    });\n}\n",
    "static": true,
    "longname": "Distraction Shield/optionsPage/htmlFunctionality.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "function",
    "name": "connectButton",
    "memberof": "Distraction Shield/optionsPage/htmlFunctionality.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/htmlFunctionality.js~connectButton",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/htmlFunctionality.js",
    "importStyle": "{connectButton}",
    "description": "Connects function to onclick property of html_item",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "connectButton"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "name": "html_button",
        "types": [
          "*"
        ]
      },
      {
        "name": "method",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 320,
    "kind": "function",
    "name": "setKeyPressFunctions",
    "memberof": "Distraction Shield/optionsPage/htmlFunctionality.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/htmlFunctionality.js~setKeyPressFunctions",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/htmlFunctionality.js",
    "importStyle": "{setKeyPressFunctions}",
    "description": "Sets all keypress functions of the optionsPage",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setKeyPressFunctions"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "name": "html_txtFld",
        "types": [
          "*"
        ]
      },
      {
        "name": "submitFunc",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 321,
    "kind": "function",
    "name": "submitOnKeyPress",
    "memberof": "Distraction Shield/optionsPage/htmlFunctionality.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/htmlFunctionality.js~submitOnKeyPress",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/htmlFunctionality.js",
    "importStyle": null,
    "description": "connect function to ENTER key keypress of an html_element",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "submitOnKeyPress"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "html"
        ],
        "spread": false,
        "optional": false,
        "name": "html_elem",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "submitFunc",
        "description": "the corresponding function to be fired"
      }
    ]
  },
  {
    "__docId__": 322,
    "kind": "function",
    "name": "initModeSelection",
    "memberof": "Distraction Shield/optionsPage/htmlFunctionality.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/htmlFunctionality.js~initModeSelection",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/htmlFunctionality.js",
    "importStyle": "{initModeSelection}",
    "description": "enables the user to update the mode of the extension and that these settings are synched across the entire extension",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "initModeSelection"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buttonGroup",
        "description": "the name of the radiobuttons"
      }
    ]
  },
  {
    "__docId__": 323,
    "kind": "file",
    "name": "Distraction Shield/optionsPage/options.js",
    "content": "import * as blockedSiteBuilder from '../modules/blockedSiteBuilder'\nimport {openTabSingleton} from '../modules/browserutil'\nimport * as storage from '../modules/storage/storage'\nimport StorageListener from \"../modules/storage/StorageListener\"\nimport UserSettings from '../classes/UserSettings'\nimport BlockedSiteList from '../classes/BlockedSiteList'\nimport BlacklistTable from './classes/BlacklistTable'\nimport IntervalSlider from './classes/IntervalSlider'\nimport TurnOffSlider from './classes/TurnOffSlider'\nimport * as connectDataToHtml from './connectDataToHtml'\nimport * as htmlFunctionality from './htmlFunctionality'\nimport {feedbackLink, tds_blacklist, tds_settings, tds_interceptCounter} from '../constants'\nimport {showDataCollectionModal} from '../dataCollection/dataCollection'\n\n/**\n * This file contains the core functions of the options page. this has all the local variables,\n * initializes everything javascript related and connects the syncStorage,\n * connectDataToHtml, blacklistTable and HtmlFunctionality\n * to one smoothly running file. Besides the initialization it contains the functions to manipulate the local variables\n * found here\n * @mixin optionsPage\n */\n\n/** String with the id of the mode-selection radio-button group\n * @type {string}\n * @memberOf optionsPage*/\nlet modeGroup = \"modeOptions\";\n\n/** Link to the {@link BlacklistTable} on this page\n * @type {BlacklistTable}\n * @memberOf optionsPage*/\nlet blockedSiteListTable;\n\n/** Link to the {@link IntervalSlider} on this page\n * @type {IntervalSlider}\n * @memberOf optionsPage*/\nlet intervalSlider;\n\n/**Link to the {@link TurnOffSlider} at this page.\n * @type {TurnOffSlider}\n * @memberOf optionsPage*/\nlet turnOffSlider;\n\n/* -------------------- Initialization of options --------------------- */\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    initOptionsPage();\n});\n\n/**\n * Initial function that is fired when the page is loaded. It initialize HTML elements and set the local variables\n * @method initOptionsPage\n * @memberOf optionsPage\n */\nfunction initOptionsPage() {\n    storage.getAll(function (output) {\n        connectHtmlFunctionality();\n        connectStorageDataToHtml(output);\n    });\n}\n\n/**\n * connect the functionality to the different html_elements on the optionspage.\n * @method connectHtmlFunctionality\n * @memberOf optionsPage\n */\nfunction connectHtmlFunctionality() {\n    htmlFunctionality.initModeSelection(modeGroup);\n    intervalSlider = new IntervalSlider('#interval-slider');\n    blockedSiteListTable = new BlacklistTable($('#blacklistTable'));\n    turnOffSlider = new TurnOffSlider('#turnOff-slider');\n    htmlFunctionality.connectButton($('#turnOff-slider-offBtn'), turnOffSlider.offButtonFunc);\n    htmlFunctionality.connectButton($('#saveBtn'), saveNewUrl);\n    htmlFunctionality.connectButton($('#statisticsLink'), openStatisticsPage);\n    htmlFunctionality.connectButton($('#feedbackButton'), openFeedbackForm);\n    htmlFunctionality.connectButton($('#tourRestartButton'), restartTour);\n    htmlFunctionality.connectButton($('#dataSettingsButton'), openDataCollectionConsent);\n    htmlFunctionality.setKeyPressFunctions($('#textFld'), saveNewUrl);\n}\n\n/**\n * connect the data found in the storage to the html_elements on the page\n * @param storage_output output received by a get all request from the storage\n * @method connectStorageDataToHtml\n * @memberOf optionsPage\n */\nfunction connectStorageDataToHtml(storage_output) {\n    loadInterceptionCounter(storage_output.tds_interceptCounter);\n    loadBlockedSiteList(storage_output.tds_blacklist);\n    loadSettings(storage_output.tds_settings);\n}\n\n/**\n * Connect the {@link BlockedSiteList} to the {@link BlacklistTable}.\n * @param {BlockedSiteList} blockedSiteList\n * @method loadBlockedSiteList\n * @memberOf optionsPage\n */\nfunction loadBlockedSiteList(blockedSiteList){\n    connectDataToHtml.loadHtmlBlacklist(blockedSiteList, blockedSiteListTable);\n}\n\n/**\n * Connect the settings object to the different parts of the optionsPage\n * @param {UserSettings} settings_object\n * @method loadSettings\n * @memberOf optionsPage\n */\nfunction loadSettings(settings_object){\n    connectDataToHtml.loadHtmlMode(settings_object.mode, modeGroup);\n    connectDataToHtml.loadHtmlInterval(settings_object.interceptionInterval, intervalSlider);\n}\n\n/**\n * set the value of the interceptioncounter at the top of the page\n * @param {int} val\n * @method loadInterceptionCounter\n * @memberOf optionsPage\n */\nfunction loadInterceptionCounter(val){\n    connectDataToHtml.loadHtmlInterceptCounter(val, $('#iCounter'));\n}\n\n/**\n * reloads the BlockedSiteList in the BlacklistTable by comparing it to the old value\n * @param {BlockedSiteList} blockedSiteList\n * @param {BlockedSiteList} oldBlockedSiteList\n * @method reloadTable\n * @memberOf optionsPage\n */\nfunction reloadTable(blockedSiteList, oldBlockedSiteList) {\n    connectDataToHtml.reloadHtmlBlacklist(blockedSiteList, oldBlockedSiteList, blockedSiteListTable);\n}\n\n/* -------------------- Manipulate local variables ------------------- */\n\n/**\n * clears the error message box\n * @method resetMessageBox\n * @memberOf optionsPage\n */\nfunction resetMessageBox() {\n    let messageBox = $('#message-box');\n    messageBox.text('');\n    messageBox.show();\n\n}\n\n/* -------------------- Act upon change of storage ------------------- */\n\n/**\n * This function should be called onChange, this checks if it needs to act on the storage change.\n * @param changes {Array} array of objects in storage that have been changed. Contains new & old value\n * @method onStorageChanged\n * @memberOf optionsPage\n */\nnew StorageListener((changes) => {\n    if (tds_blacklist in changes) {\n        let newBlockedSiteList = BlockedSiteList.deserializeBlockedSiteList(changes[tds_blacklist].newValue);\n        let oldBlockedSiteList = BlockedSiteList.deserializeBlockedSiteList(changes[tds_blacklist].oldValue);\n        reloadTable(newBlockedSiteList,oldBlockedSiteList);\n    } if (tds_settings in changes) {\n        let newSettings = UserSettings.deserializeSettings(changes[tds_settings].newValue);\n        loadSettings(newSettings);\n    } if (tds_interceptCounter in changes) {\n        loadInterceptionCounter(changes[tds_interceptCounter].newValue);\n    }\n});\n\n/* -------------------- Manipulate local variables ------------------- */\n\n/**\n * Is called when we hit enter or click save upon saving a new url\n * @method saveNewUrl\n * @memberOf optionsPage\n */\nfunction saveNewUrl() {\n    resetMessageBox();\n    let html_txtFld = $('#textFld');\n    let newUrl = html_txtFld.val();\n    blockedSiteBuilder.createBlockedSiteAndAddToStorage(newUrl)\n        .catch(error => {$('#message-box').text(error).fadeOut(8000, resetMessageBox)});\n    html_txtFld.val('');\n}\n\n/* -------------------- -------------------------- -------------------- */\n\n/**\n * Opens the feedback form for users\n * @method openFeedbackForm\n * @memberOf optionsPage\n */\nfunction openFeedbackForm() {\n    openTabSingleton(feedbackLink);\n}\n\n/**\n * restarts the intro tour\n * @method restartTour\n * @memberOf optionsPage\n */\nfunction restartTour() {\n    chrome.tabs.getCurrent(tab => {\n        if (!tab)\n            openTabSingleton(chrome.runtime.getURL('/assets/html/introTour.html'));\n        else\n            chrome.tabs.update(tab.id, {url: chrome.runtime.getURL('/assets/html/introTour.html')});\n    })\n}\n\n/**\n * opens up the page with user statistics\n * @method openStatisticsPage\n * @memberOf optionsPage\n */\nfunction openStatisticsPage() {\n    openTabSingleton(chrome.runtime.getURL('/assets/html/statistics.html'));\n}\n\n/**\n * This function loads the button functionality for the modal. This can only be loaded when the modal is shown,\n * since the html is added dynamically\n * @method openDataCollectionConsent\n * @memberOf optionsPage\n */\nfunction openDataCollectionConsent(){\n    showDataCollectionModal($('#dataConsentModal'));\n}\n",
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 324,
    "kind": "variable",
    "name": "modeGroup",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~modeGroup",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "String with the id of the mode-selection radio-button group",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 325,
    "kind": "function",
    "name": "initOptionsPage",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~initOptionsPage",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "Initial function that is fired when the page is loaded. It initialize HTML elements and set the local variables",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "initOptionsPage"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 326,
    "kind": "function",
    "name": "connectHtmlFunctionality",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~connectHtmlFunctionality",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "connect the functionality to the different html_elements on the optionspage.",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "connectHtmlFunctionality"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 327,
    "kind": "function",
    "name": "connectStorageDataToHtml",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~connectStorageDataToHtml",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "connect the data found in the storage to the html_elements on the page",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "connectStorageDataToHtml"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "storage_output",
        "description": "output received by a get all request from the storage"
      }
    ]
  },
  {
    "__docId__": 328,
    "kind": "function",
    "name": "loadBlockedSiteList",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~loadBlockedSiteList",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "Connect the {@link BlockedSiteList} to the {@link BlacklistTable}.",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "loadBlockedSiteList"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BlockedSiteList"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedSiteList",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 329,
    "kind": "function",
    "name": "loadSettings",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~loadSettings",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "Connect the settings object to the different parts of the optionsPage",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "loadSettings"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UserSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "settings_object",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 330,
    "kind": "function",
    "name": "loadInterceptionCounter",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~loadInterceptionCounter",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "set the value of the interceptioncounter at the top of the page",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "loadInterceptionCounter"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 331,
    "kind": "function",
    "name": "reloadTable",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~reloadTable",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "reloads the BlockedSiteList in the BlacklistTable by comparing it to the old value",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "reloadTable"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BlockedSiteList"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedSiteList",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BlockedSiteList"
        ],
        "spread": false,
        "optional": false,
        "name": "oldBlockedSiteList",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 332,
    "kind": "function",
    "name": "resetMessageBox",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~resetMessageBox",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "clears the error message box",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "resetMessageBox"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 333,
    "kind": "function",
    "name": "saveNewUrl",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~saveNewUrl",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "Is called when we hit enter or click save upon saving a new url",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "saveNewUrl"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 334,
    "kind": "function",
    "name": "openFeedbackForm",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~openFeedbackForm",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "Opens the feedback form for users",
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "openFeedbackForm"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 335,
    "kind": "function",
    "name": "restartTour",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~restartTour",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "restarts the intro tour",
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "restartTour"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 336,
    "kind": "function",
    "name": "openStatisticsPage",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~openStatisticsPage",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "opens up the page with user statistics",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "openStatisticsPage"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 337,
    "kind": "function",
    "name": "openDataCollectionConsent",
    "memberof": "Distraction Shield/optionsPage/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/optionsPage/options.js~openDataCollectionConsent",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/optionsPage/options.js",
    "importStyle": null,
    "description": "This function loads the button functionality for the modal. This can only be loaded when the modal is shown,\nsince the html is added dynamically",
    "lineNumber": 226,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "openDataCollectionConsent"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "optionsPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 338,
    "kind": "file",
    "name": "Distraction Shield/statisticsPage/classes/BasicTable.js",
    "content": "\nexport default class BasicTable {\n\n    /**\n     * Abstract Class for rendering {@link BlockedSiteList} data to tables\n     * @param html_element table element to fill with data\n     * @abstract\n     * @constructs BasicTable\n     * @class\n     */\n    constructor(html_element) {\n        this._html_element = html_element;\n    }\n\n    /**\n     * Removes old tablerow elements, leaving only the header, to fill the table with data.\n     * @param data {BlockedSiteList} to fill the table with\n     * @function BasicTable#createTable\n     */\n    createTable(data) {\n        this._html_element.find('tr:not(:has(th))').remove();\n        this._html_element.append(data.map(this.generateTableRow));\n    }\n\n    /**\n     * Constructs a table row element from a BlockedSite\n     * @param dataElement {BlockedSite}\n     * @returns {JQuery|jQuery|HTMLElement} table row element\n     * @function BasicTable#generateTableRow\n     */\n    generateTableRow(dataElement) {\n        return $(\"<tr class='table-row'></tr>\");\n    }\n\n    /**\n     * Use this function to render data in the table.\n     * @param data {BlockedSiteList} BlockedSiteList to render\n     * @function BasicTable#render\n     */\n    render(data) {\n        this.createTable(data);\n    }\n}",
    "static": true,
    "longname": "Distraction Shield/statisticsPage/classes/BasicTable.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 339,
    "kind": "class",
    "name": "BasicTable",
    "memberof": "Distraction Shield/statisticsPage/classes/BasicTable.js",
    "static": true,
    "longname": "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/statisticsPage/classes/BasicTable.js",
    "importStyle": "BasicTable",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 340,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable#constructor",
    "access": null,
    "description": "Abstract Class for rendering {@link BlockedSiteList} data to tables",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@constructs",
        "tagValue": "BasicTable"
      },
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "html_element",
        "description": "table element to fill with data"
      }
    ],
    "abstract": true
  },
  {
    "__docId__": 341,
    "kind": "member",
    "name": "_html_element",
    "memberof": "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable",
    "static": false,
    "longname": "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable#_html_element",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "createTable",
    "memberof": "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable#createTable",
    "access": null,
    "description": "Removes old tablerow elements, leaving only the header, to fill the table with data.",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "BasicTable#createTable"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{BlockedSiteList} to fill the table with"
      }
    ]
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "generateTableRow",
    "memberof": "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable#generateTableRow",
    "access": null,
    "description": "Constructs a table row element from a BlockedSite",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{JQuery|jQuery|HTMLElement} table row element"
      },
      {
        "tagName": "@function",
        "tagValue": "BasicTable#generateTableRow"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataElement",
        "description": "{BlockedSite}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JQuery",
        "jQuery",
        "HTMLElement"
      ],
      "spread": false,
      "description": "table row element"
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "render",
    "memberof": "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable#render",
    "access": null,
    "description": "Use this function to render data in the table.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "BasicTable#render"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{BlockedSiteList} BlockedSiteList to render"
      }
    ]
  },
  {
    "__docId__": 345,
    "kind": "file",
    "name": "Distraction Shield/statisticsPage/classes/BlacklistStatsTable.js",
    "content": "import * as dateutil from \"../../modules/dateutil\"\nimport BasicTable from \"./BasicTable\"\n\n/**\n * Table which is used to display data about the amount of interception a user has, and the amount of time the user\n * has spent on a certain blacklisted website.\n * @constructs BlackListStatsTable\n * @class\n * @augments BasicTable\n */\nexport default class BlacklistStatsTable extends BasicTable {\n    /**\n     * This functions generates an HTML row containing the icon, name, counter & timespent of one {@link BlockedSite}\n     * @param {BlockedSite} site a BlockedSite of which the data is used\n     * @return {JQuery|jQuery|HTMLElement} HTML row from the data\n     * @function BlacklistStatsTable#generateTableRow\n     * @override\n     */\n    generateTableRow(site) {\n        return $(\"<tr class='table-row' >\" +\n            \"<td>\" + site.icon + \"</td>\" +\n            \"<td>\" + site.name + \"</td>\" +\n            \"<td>\" + site.counter + \"</td>\" +\n            \"<td>\" + dateutil.msToHHMMSS(site.timeSpent) + \"</td>\" +\n            \"</tr>\");\n    }\n}\n\n\n",
    "static": true,
    "longname": "Distraction Shield/statisticsPage/classes/BlacklistStatsTable.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 346,
    "kind": "class",
    "name": "BlacklistStatsTable",
    "memberof": "Distraction Shield/statisticsPage/classes/BlacklistStatsTable.js",
    "static": true,
    "longname": "Distraction Shield/statisticsPage/classes/BlacklistStatsTable.js~BlacklistStatsTable",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/statisticsPage/classes/BlacklistStatsTable.js",
    "importStyle": "BlacklistStatsTable",
    "description": "Table which is used to display data about the amount of interception a user has, and the amount of time the user\nhas spent on a certain blacklisted website.",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@constructs",
        "tagValue": "BlackListStatsTable"
      },
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "BasicTable"
      }
    ],
    "interface": false,
    "extends": [
      "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable"
    ]
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "generateTableRow",
    "memberof": "Distraction Shield/statisticsPage/classes/BlacklistStatsTable.js~BlacklistStatsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/statisticsPage/classes/BlacklistStatsTable.js~BlacklistStatsTable#generateTableRow",
    "access": null,
    "description": "This functions generates an HTML row containing the icon, name, counter & timespent of one {@link BlockedSite}",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "BlacklistStatsTable#generateTableRow"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BlockedSite"
        ],
        "spread": false,
        "optional": false,
        "name": "site",
        "description": "a BlockedSite of which the data is used"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JQuery",
        "jQuery",
        "HTMLElement"
      ],
      "spread": false,
      "description": "HTML row from the data"
    },
    "override": true
  },
  {
    "__docId__": 348,
    "kind": "file",
    "name": "Distraction Shield/statisticsPage/classes/ExerciseTimeTable.js",
    "content": "import * as dateutil from \"../../modules/dateutil\"\nimport BasicTable from \"./BasicTable\"\n\n/**\n * Table which is used to display the amount of time the user\n * has spent on exercises on the Zeeguu page.\n * @constructs ExerciseTimeTable\n * @class\n * @augments BasicTable\n */\nexport default class ExerciseTimeTable extends BasicTable {\n\n    /**\n     * This functions generates an HTML row containing the icon, name, counter & timespent of one {@link BlockedSite}\n     * @param item item containing the date + time spent on exercises\n     * @return {JQuery|jQuery|HTMLElement} HTML row from the data\n     * @function BlacklistStatsTable#generateTableRow\n     * @memberof! ExerciseTimeTable\n     */\n    generateTableRow(item) {\n        return $(\"<tr>\" +\n            \"<td>\" + item.date + \"</td>\" +\n            \"<td>\" + dateutil.msToHHMMSS(item.timeSpent) + \"</td>\" +\n            \"</tr>\");\n    }\n}",
    "static": true,
    "longname": "Distraction Shield/statisticsPage/classes/ExerciseTimeTable.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 349,
    "kind": "class",
    "name": "ExerciseTimeTable",
    "memberof": "Distraction Shield/statisticsPage/classes/ExerciseTimeTable.js",
    "static": true,
    "longname": "Distraction Shield/statisticsPage/classes/ExerciseTimeTable.js~ExerciseTimeTable",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/statisticsPage/classes/ExerciseTimeTable.js",
    "importStyle": "ExerciseTimeTable",
    "description": "Table which is used to display the amount of time the user\nhas spent on exercises on the Zeeguu page.",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@constructs",
        "tagValue": "ExerciseTimeTable"
      },
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "BasicTable"
      }
    ],
    "interface": false,
    "extends": [
      "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable"
    ]
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "generateTableRow",
    "memberof": "Distraction Shield/statisticsPage/classes/ExerciseTimeTable.js~ExerciseTimeTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/statisticsPage/classes/ExerciseTimeTable.js~ExerciseTimeTable#generateTableRow",
    "access": null,
    "description": "This functions generates an HTML row containing the icon, name, counter & timespent of one {@link BlockedSite}",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "BlacklistStatsTable#generateTableRow\n@memberof! ExerciseTimeTable"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "item containing the date + time spent on exercises"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JQuery",
        "jQuery",
        "HTMLElement"
      ],
      "spread": false,
      "description": "HTML row from the data"
    }
  },
  {
    "__docId__": 351,
    "kind": "file",
    "name": "Distraction Shield/statisticsPage/classes/InterceptionCounterTable.js",
    "content": "import BasicTable from \"./BasicTable\"\n\n/**\n * Table which is used to display the total amount of times the user has been intercepted in the past\n * day, week and month.\n * @constructs InterceptionCounterTable\n * @class\n * @augments BasicTable\n */\nexport default class InterceptionCounterTable extends BasicTable {\n\n    /**\n     * This function renders the data to the screen in the correct format.\n     * @function InterceptionCounterTable#render\n     * @override\n     */\n    render(data) {\n        $('#countDay').text(data.countDay);\n        $('#countWeek').text(data.countWeek);\n        $('#countMonth').text(data.countMonth);\n        $('#countTotal').text(data.countTotal);\n    }\n}\n\n\n\n\n\n",
    "static": true,
    "longname": "Distraction Shield/statisticsPage/classes/InterceptionCounterTable.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 352,
    "kind": "class",
    "name": "InterceptionCounterTable",
    "memberof": "Distraction Shield/statisticsPage/classes/InterceptionCounterTable.js",
    "static": true,
    "longname": "Distraction Shield/statisticsPage/classes/InterceptionCounterTable.js~InterceptionCounterTable",
    "access": null,
    "export": true,
    "importPath": "distraction-shield/Distraction Shield/statisticsPage/classes/InterceptionCounterTable.js",
    "importStyle": "InterceptionCounterTable",
    "description": "Table which is used to display the total amount of times the user has been intercepted in the past\nday, week and month.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@constructs",
        "tagValue": "InterceptionCounterTable"
      },
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "BasicTable"
      }
    ],
    "interface": false,
    "extends": [
      "Distraction Shield/statisticsPage/classes/BasicTable.js~BasicTable"
    ]
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "render",
    "memberof": "Distraction Shield/statisticsPage/classes/InterceptionCounterTable.js~InterceptionCounterTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Distraction Shield/statisticsPage/classes/InterceptionCounterTable.js~InterceptionCounterTable#render",
    "access": null,
    "description": "This function renders the data to the screen in the correct format.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "InterceptionCounterTable#render"
      }
    ],
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "override": true
  },
  {
    "__docId__": 354,
    "kind": "file",
    "name": "Distraction Shield/statisticsPage/statistics.js",
    "content": "import BlacklistStatsTable from './classes/BlacklistStatsTable'\nimport ExerciseTimeTable from './classes/ExerciseTimeTable'\nimport InterceptionCounterTable from './classes/InterceptionCounterTable'\nimport BlockedSiteList from '../classes/BlockedSiteList.js'\nimport * as storage from '../modules/storage/storage'\nimport * as interception from '../modules/statistics/interception'\nimport {tds_blacklist, tds_interceptDateList, tds_exerciseTime} from '../constants'\nimport StorageListener from \"../modules/storage/StorageListener\"\n\n/**\n * This file contains the code and functions which control the statistics page.\n * Data is retrieved from the storage, and is passed to various tables.\n * @mixin statisticsPage\n */\n\nlet interceptionCounterTable = null;\nlet blacklistTable = null;\nlet exerciseTimeTable = null;\n\n/**\n * initial function that is fired when the page is loaded.\n * @memberOf statisticsPage\n */\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    connectHtmlFunctionality();\n    initStatisticsPage();\n});\n\n/**\n * Initialize HTML elements and set the data in the tables. Retrieves the data from the storage using Promises.\n * Waits until all data is retrieved, and then populates the interceptionCounterTable, the blacklistTable and the\n * exerciseTimeTable.\n * @memberOf statisticsPage\n */\nfunction initStatisticsPage() {\n    Promise.all([storage.getInterceptDateList(), storage.getExerciseTimeList(), storage.getBlacklistPromise()])\n        .then(function (response) {\n            let interceptDateList = response[0].tds_interceptDateList;\n            let blockedSiteList = response[2];\n            let exerciseTime = response[1];\n\n            setInterceptionCounterTable(interceptDateList);\n            blacklistTable.render(blockedSiteList);\n            exerciseTimeTable.render(exerciseTime);\n        });\n}\n/**\n * @param interceptDateList\n * @memberOf statisticsPage\n */\nfunction setInterceptionCounterTable(interceptDateList){\n    let counters = interception.calcInterceptData(interceptDateList);\n    interceptionCounterTable.render(counters);\n}\n\n/**\n * Connects HTML functionality to javascript classes\n * @memberOf statisticsPage\n */\nfunction connectHtmlFunctionality() {\n    interceptionCounterTable = new InterceptionCounterTable();\n    blacklistTable = new BlacklistStatsTable($('#interceptTable'));\n    exerciseTimeTable = new ExerciseTimeTable($('#exerciseTime'));\n}\n\n/**\n * Storage Listener\n * @type {StorageListener}\n * @method onStorageChange\n * @memberOf statisticsPage\n */\nnew StorageListener((changes) => {\n    if (tds_blacklist in changes) {\n        let newBlockedSiteList = BlockedSiteList.deserializeBlockedSiteList(changes[tds_blacklist].newValue);\n        blacklistTable.render(newBlockedSiteList);\n    }\n    if (tds_exerciseTime in changes) {\n        let newExerciseTime = changes[tds_exerciseTime].newValue;\n        exerciseTimeTable.render(newExerciseTime);\n    }\n    if (tds_interceptDateList in changes) {\n        let newInterceptDateList = changes[tds_interceptDateList].newValue;\n        setInterceptionCounterTable(newInterceptDateList);\n    }\n});",
    "static": true,
    "longname": "Distraction Shield/statisticsPage/statistics.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "variable",
    "name": "interceptionCounterTable",
    "memberof": "Distraction Shield/statisticsPage/statistics.js",
    "static": true,
    "longname": "Distraction Shield/statisticsPage/statistics.js~interceptionCounterTable",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/statisticsPage/statistics.js",
    "importStyle": null,
    "description": "This file contains the code and functions which control the statistics page.\nData is retrieved from the storage, and is passed to various tables.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@mixin",
        "tagValue": "statisticsPage"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "variable",
    "name": "blacklistTable",
    "memberof": "Distraction Shield/statisticsPage/statistics.js",
    "static": true,
    "longname": "Distraction Shield/statisticsPage/statistics.js~blacklistTable",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/statisticsPage/statistics.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "variable",
    "name": "exerciseTimeTable",
    "memberof": "Distraction Shield/statisticsPage/statistics.js",
    "static": true,
    "longname": "Distraction Shield/statisticsPage/statistics.js~exerciseTimeTable",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/statisticsPage/statistics.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "function",
    "name": "initStatisticsPage",
    "memberof": "Distraction Shield/statisticsPage/statistics.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/statisticsPage/statistics.js~initStatisticsPage",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/statisticsPage/statistics.js",
    "importStyle": null,
    "description": "Initialize HTML elements and set the data in the tables. Retrieves the data from the storage using Promises.\nWaits until all data is retrieved, and then populates the interceptionCounterTable, the blacklistTable and the\nexerciseTimeTable.",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "statisticsPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 359,
    "kind": "function",
    "name": "setInterceptionCounterTable",
    "memberof": "Distraction Shield/statisticsPage/statistics.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/statisticsPage/statistics.js~setInterceptionCounterTable",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/statisticsPage/statistics.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "statisticsPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "interceptDateList",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 360,
    "kind": "function",
    "name": "connectHtmlFunctionality",
    "memberof": "Distraction Shield/statisticsPage/statistics.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/statisticsPage/statistics.js~connectHtmlFunctionality",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/statisticsPage/statistics.js",
    "importStyle": null,
    "description": "Connects HTML functionality to javascript classes",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "statisticsPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 361,
    "kind": "file",
    "name": "Distraction Shield/tooltipPage/tooltip.js",
    "content": "import * as blockedSiteBuilder from \"../modules/blockedSiteBuilder.js\"\nimport BlockedSiteList from \"../classes/BlockedSiteList\"\nimport * as stringutil from \"../modules/stringutil.js\"\nimport {openTabSingleton} from \"../modules/browserutil\"\nimport * as storage from \"../modules/storage/storage\"\nimport * as storageModifier from \"../modules/storage/storageModifier\"\nimport StorageListener from \"../modules/storage/StorageListener\"\nimport {tds_blacklist} from '../constants'\nimport {logToFile} from '../modules/logger'\nimport * as constants from '../constants'\n\n/**\n * Scripts for the tooltip, assigning functions to buttons\n * @mixin tooltipPage\n */\n\n/** @var {JQuery|jQuery|HTMLElement} saveButton Block/Unblock button\n * @memberOf tooltipPage*/\nlet saveButton = $('#saveBtn');\n/** @var {JQuery|jQuery|HTMLElement} optionsButton Options button\n * @memberOf tooltipPage*/\nlet optionsButton = $('#optionsBtn');\n/** @var {JQuery|jQuery|HTMLElement} statisticsButton Statistics button\n * @memberOf tooltipPage*/\nlet statisticsButton = $('#statisticsBtn');\n\n/** Connects html buttons to their corresponding functions\n * @memberOf tooltipPage*/\nfunction connectButtons() {\n    optionsButton.on('click', openOptionsPage);\n    statisticsButton.on('click', openStatisticsPage);\n    setSaveButtonFunctionality();\n}\n\n/** Opens statistics page and closes tooltip\n * @memberOf tooltipPage*/\nfunction openStatisticsPage() {\n    openTabSingleton(chrome.runtime.getURL('/assets/html/statistics.html'), () => {\n        window.close();\n    });\n}\n\n/** Opens options page and closes tooltip\n * @memberOf tooltipPage*/\nfunction openOptionsPage() {\n    openTabSingleton(chrome.runtime.getURL('/assets/html/options.html'), () => {\n        window.close();\n    });\n}\n\n/* ----------- ----------- Save button functionality ----------- ----------- */\n\n/**\n * match the current url to the current list of blockedSiteItems\n * @param {string} url to be compared\n * @param {function} callback function that takes the blockedSite to which the url was found to be equal to\n * @memberOf tooltipPage\n */\nfunction patternMatchUrl(url, callback) {\n    storage.getBlacklistPromise().then(blockedSiteList => {\n        let item = null;\n        blockedSiteList.some(function (bl) {\n            if (stringutil.wildcardStrComp(url, bl.url)) {\n                item = bl;\n                return true;\n            }\n            return false;\n        });\n        callback(item);\n    });\n\n}\n\n/**\n * returns a function that gets the corresponding BlockedSite from the background and updates its checkboxVal to the new value.\n * @param url of the current page\n * @memberOf tooltipPage\n */\nfunction toggleBlockedSite(url) {\n    return function () {\n        storage.getBlacklistPromise().then(blockedSiteList => {\n            let list = blockedSiteList;\n            let newItem = null;\n            for (let i = 0; i < list.length; i++) {\n                if (stringutil.wildcardStrComp(url, list[i].url)) {\n                    newItem = list[i];\n                    newItem.checkboxVal = !newItem.checkboxVal;\n                    storageModifier.updateBlockedSiteInStorage(newItem);\n                    logToFile(constants.logEventType.changed, newItem.name, (newItem.checkboxVal ? 'enabled' : 'disabled'), constants.logType.settings);\n                    break;\n                }\n            }\n        });\n    }\n}\n/**\n * Changes the text of {@link saveButton} to Block/Unblock\n * @param blocked {boolean} true = 'Block', false = 'Unblock'\n * @memberOf tooltipPage\n */\nfunction setSaveButton(blocked){\n    if (blocked)\n        saveButton.text(\"Block\");\n    else\n        saveButton.text(\"Unblock\");\n}\n\n/**\n * Change colour and update functionality of {@link saveButton} when we add a new website to the blockedSiteList\n * @memberOf tooltipPage\n */\nfunction setSaveButtonToSuccess() {\n    saveButton.attr('class', 'btn btn-success');\n    saveButton.text(\"Success!\");\n    saveButton.unbind();\n    setTimeout(function () {\n        saveButton.attr('class', 'btn btn-info');\n        setSaveButton(true);\n        setSaveButtonFunctionality();\n    }, 3000);\n}\n\nfunction saveCurrentPageToBlacklist() {\n    chrome.tabs.query({active: true, currentWindow: true}, function (arrayOfTabs) {\n        let activeTab = arrayOfTabs[0];\n        blockedSiteBuilder.createBlockedSiteAndAddToStorage(activeTab.url)\n            .catch((error) => {\n                chrome.extension.getBackgroundPage().alert(error);\n            });\n    });\n}\n\n/**\n * Update the functionality of {@see saveButton} to one of 3 states:\n * <ul style=\"list-style: none;\">\n * <li>1. Add a non-blacklisted website to the blacklist/blockedSiteList\n * <li>2. Disable the blocking of this blacklisted website\n * <li>3. Enable the blocking of this blacklisted website\n * </ul>\n * @memberOf tooltipPage\n */\nfunction setSaveButtonFunctionality() {\n    chrome.tabs.query({active: true, currentWindow: true}, function (arrayOfTabs) {\n        let activeTab = arrayOfTabs[0];\n        let url = activeTab.url;\n        patternMatchUrl(url, function (matchedBlockedSite) {\n            saveButton.unbind();\n            if (matchedBlockedSite != null) {\n                saveButton.on('click', toggleBlockedSite(url));\n                if (matchedBlockedSite.checkboxVal) {\n                    setSaveButton(false);\n                } else {\n                    setSaveButton(true);\n                }\n            } else {\n                saveButton.on('click', saveCurrentPageToBlacklist);\n                setSaveButton(true);\n            }\n        });\n    });\n}\n\n/**\n * Storage Listener\n * @type {StorageListener}\n * @method onStorageChange\n * @memberOf tooltipPage\n */\n\nnew StorageListener((changes) => {\n    if (tds_blacklist in changes) {\n        let oldBlockedSiteList = BlockedSiteList.deserializeBlockedSiteList(changes[tds_blacklist].oldValue);\n        let newBlockedSiteList = BlockedSiteList.deserializeBlockedSiteList(changes[tds_blacklist].newValue);\n        if (oldBlockedSiteList.length < newBlockedSiteList.length) {\n            setSaveButtonToSuccess();\n        } else {\n            setSaveButtonFunctionality();\n        }\n    }\n});\n\n/**\n * function that initiates the functionality of the tooltip\n * @memberOf tooltipPage\n */\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    connectButtons();\n});",
    "static": true,
    "longname": "Distraction Shield/tooltipPage/tooltip.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 362,
    "kind": "variable",
    "name": "saveButton",
    "memberof": "Distraction Shield/tooltipPage/tooltip.js",
    "static": true,
    "longname": "Distraction Shield/tooltipPage/tooltip.js~saveButton",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/tooltipPage/tooltip.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@var",
        "tagValue": "{JQuery|jQuery|HTMLElement} saveButton Block/Unblock button"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "tooltipPage"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "variable",
    "name": "optionsButton",
    "memberof": "Distraction Shield/tooltipPage/tooltip.js",
    "static": true,
    "longname": "Distraction Shield/tooltipPage/tooltip.js~optionsButton",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/tooltipPage/tooltip.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@var",
        "tagValue": "{JQuery|jQuery|HTMLElement} optionsButton Options button"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "tooltipPage"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "variable",
    "name": "statisticsButton",
    "memberof": "Distraction Shield/tooltipPage/tooltip.js",
    "static": true,
    "longname": "Distraction Shield/tooltipPage/tooltip.js~statisticsButton",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/tooltipPage/tooltip.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@var",
        "tagValue": "{JQuery|jQuery|HTMLElement} statisticsButton Statistics button"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "tooltipPage"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "function",
    "name": "connectButtons",
    "memberof": "Distraction Shield/tooltipPage/tooltip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/tooltipPage/tooltip.js~connectButtons",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/tooltipPage/tooltip.js",
    "importStyle": null,
    "description": "Connects html buttons to their corresponding functions",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "tooltipPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 366,
    "kind": "function",
    "name": "openStatisticsPage",
    "memberof": "Distraction Shield/tooltipPage/tooltip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/tooltipPage/tooltip.js~openStatisticsPage",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/tooltipPage/tooltip.js",
    "importStyle": null,
    "description": "Opens statistics page and closes tooltip",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "tooltipPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 367,
    "kind": "function",
    "name": "openOptionsPage",
    "memberof": "Distraction Shield/tooltipPage/tooltip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/tooltipPage/tooltip.js~openOptionsPage",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/tooltipPage/tooltip.js",
    "importStyle": null,
    "description": "Opens options page and closes tooltip",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "tooltipPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 368,
    "kind": "function",
    "name": "patternMatchUrl",
    "memberof": "Distraction Shield/tooltipPage/tooltip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/tooltipPage/tooltip.js~patternMatchUrl",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/tooltipPage/tooltip.js",
    "importStyle": null,
    "description": "match the current url to the current list of blockedSiteItems",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "tooltipPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "to be compared"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "function that takes the blockedSite to which the url was found to be equal to"
      }
    ]
  },
  {
    "__docId__": 369,
    "kind": "function",
    "name": "toggleBlockedSite",
    "memberof": "Distraction Shield/tooltipPage/tooltip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/tooltipPage/tooltip.js~toggleBlockedSite",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/tooltipPage/tooltip.js",
    "importStyle": null,
    "description": "returns a function that gets the corresponding BlockedSite from the background and updates its checkboxVal to the new value.",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "tooltipPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "of the current page"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "function",
    "name": "setSaveButton",
    "memberof": "Distraction Shield/tooltipPage/tooltip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/tooltipPage/tooltip.js~setSaveButton",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/tooltipPage/tooltip.js",
    "importStyle": null,
    "description": "Changes the text of {@link saveButton} to Block/Unblock",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "tooltipPage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "blocked",
        "description": "{boolean} true = 'Block', false = 'Unblock'"
      }
    ]
  },
  {
    "__docId__": 371,
    "kind": "function",
    "name": "setSaveButtonToSuccess",
    "memberof": "Distraction Shield/tooltipPage/tooltip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/tooltipPage/tooltip.js~setSaveButtonToSuccess",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/tooltipPage/tooltip.js",
    "importStyle": null,
    "description": "Change colour and update functionality of {@link saveButton} when we add a new website to the blockedSiteList",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "tooltipPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 372,
    "kind": "function",
    "name": "saveCurrentPageToBlacklist",
    "memberof": "Distraction Shield/tooltipPage/tooltip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/tooltipPage/tooltip.js~saveCurrentPageToBlacklist",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/tooltipPage/tooltip.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 373,
    "kind": "function",
    "name": "setSaveButtonFunctionality",
    "memberof": "Distraction Shield/tooltipPage/tooltip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Distraction Shield/tooltipPage/tooltip.js~setSaveButtonFunctionality",
    "access": null,
    "export": false,
    "importPath": "distraction-shield/Distraction Shield/tooltipPage/tooltip.js",
    "importStyle": null,
    "description": "Update the functionality of {@see saveButton} to one of 3 states:\n<ul style=\"list-style: none;\">\n<li>1. Add a non-blacklisted website to the blacklist/blockedSiteList\n<li>2. Disable the blocking of this blacklisted website\n<li>3. Enable the blocking of this blacklisted website\n</ul>",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "tooltipPage"
      }
    ],
    "params": []
  },
  {
    "__docId__": 375,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 376,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 377,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 378,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 379,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 380,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 381,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 382,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 383,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 384,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 385,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 386,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 387,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 388,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 389,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 390,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 391,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 392,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 393,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 394,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 395,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 396,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 397,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 398,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 399,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 400,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 401,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 402,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 403,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 404,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 405,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 406,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 407,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 408,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 409,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 410,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 411,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 412,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 413,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 414,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 415,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 416,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 417,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 418,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 419,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 420,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 421,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 423,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 424,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 425,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 426,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 427,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 428,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 429,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 430,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]